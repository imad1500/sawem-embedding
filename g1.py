# -*- coding: utf-8 -*-
"""
Script de g√©n√©ration d'une pr√©sentation PowerPoint pour la formation
"Python pour l'analyse de donn√©es" - Session de 2h (9h00-11h00)

Bas√© sur le programme d√©taill√© de formation et le fichier "Python 2020.pptx"
Adapt√© pour une pr√©sentation interactive avec notes d√©taill√©es pour le pr√©sentateur

Auteur: Formation Python 2025
Date: Octobre 2025
"""

from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.dml.color import RGBColor
from pptx.enum.text import PP_ALIGN
from pptx.enum.shapes import MSO_SHAPE
from pptx.enum.dml import MSO_THEME_COLOR
import os

# Cr√©er une nouvelle pr√©sentation
prs = Presentation()

# --- Fonctions utilitaires pour la cr√©ation des diapositives ---
def add_title_slide(prs, title, subtitle="", notes=""):
    """Ajoute une diapositive de titre avec mise en forme."""
    slide_layout = prs.slide_layouts[0]  # Layout titre
    slide = prs.slides.add_slide(slide_layout)
    
    slide.shapes.title.text = title
    title_shape = slide.shapes.title
    title_shape.text_frame.paragraphs[0].font.size = Pt(44)
    title_shape.text_frame.paragraphs[0].font.bold = True
    
    if subtitle:
        slide.placeholders[1].text = subtitle
        subtitle_shape = slide.placeholders[1]
        subtitle_shape.text_frame.paragraphs[0].font.size = Pt(18)
    
    if notes:
        slide.notes_slide.notes_text_frame.text = notes

def add_section_slide(prs, title, subtitle="", notes=""):
    """Ajoute une diapositive de section pour marquer une nouvelle partie."""
    slide_layout = prs.slide_layouts[2]  # Layout section
    slide = prs.slides.add_slide(slide_layout)
    slide.shapes.title.text = title
    if subtitle:
        slide.placeholders[1].text = subtitle
    if notes:
        slide.notes_slide.notes_text_frame.text = notes

def add_content_slide(prs, title, content, notes=""):
    """Ajoute une diapositive avec un titre et du contenu textuel."""
    slide_layout = prs.slide_layouts[1]  # Layout contenu
    slide = prs.slides.add_slide(slide_layout)
    slide.shapes.title.text = title
    
    if content:
        slide.placeholders[1].text = content
        content_shape = slide.placeholders[1]
        content_shape.text_frame.paragraphs[0].font.size = Pt(20)
    
    if notes:
        slide.notes_slide.notes_text_frame.text = notes

def add_code_slide(prs, title, code, notes="", explanation=""):
    """Ajoute une diapositive pour un exemple de code."""
    slide_layout = prs.slide_layouts[6]  # Layout vierge
    slide = prs.slides.add_slide(slide_layout)
    
    # Titre
    title_shape = slide.shapes.add_textbox(Inches(0.5), Inches(0.3), Inches(9), Inches(1))
    title_frame = title_shape.text_frame
    title_para = title_frame.paragraphs[0]
    title_para.text = title
    title_para.font.size = Pt(28)
    title_para.font.bold = True
    
    # Explication si fournie
    if explanation:
        exp_shape = slide.shapes.add_textbox(Inches(0.5), Inches(1.2), Inches(9), Inches(1))
        exp_frame = exp_shape.text_frame
        exp_para = exp_frame.paragraphs[0]
        exp_para.text = explanation
        exp_para.font.size = Pt(16)
        code_top = Inches(2.2)
    else:
        code_top = Inches(1.5)
    
    # Zone de code avec fond color√©
    code_box = slide.shapes.add_textbox(Inches(0.5), code_top, Inches(9), Inches(4.5))
    text_frame = code_box.text_frame
    text_frame.margin_left = Inches(0.2)
    text_frame.margin_top = Inches(0.1)
    
    p = text_frame.paragraphs[0]
    p.text = code
    p.font.name = 'Courier New'
    p.font.size = Pt(14)
    
    # Ajouter fond color√© au code
    fill = code_box.fill
    fill.solid()
    fill.fore_color.rgb = RGBColor(240, 240, 240)
    
    if notes:
        slide.notes_slide.notes_text_frame.text = notes

def add_two_column_slide(prs, title, left_content, right_content, notes=""):
    """Ajoute une diapositive avec deux colonnes."""
    slide_layout = prs.slide_layouts[6]  # Layout vierge
    slide = prs.slides.add_slide(slide_layout)
    
    # Titre
    title_shape = slide.shapes.add_textbox(Inches(0.5), Inches(0.3), Inches(9), Inches(1))
    title_frame = title_shape.text_frame
    title_para = title_frame.paragraphs[0]
    title_para.text = title
    title_para.font.size = Pt(28)
    title_para.font.bold = True
    
    # Colonne gauche
    left_shape = slide.shapes.add_textbox(Inches(0.5), Inches(1.5), Inches(4.5), Inches(5))
    left_frame = left_shape.text_frame
    left_frame.text = left_content
    for para in left_frame.paragraphs:
        para.font.size = Pt(16)
    
    # Colonne droite
    right_shape = slide.shapes.add_textbox(Inches(5), Inches(1.5), Inches(4.5), Inches(5))
    right_frame = right_shape.text_frame
    right_frame.text = right_content
    for para in right_frame.paragraphs:
        para.font.size = Pt(16)
    
    if notes:
        slide.notes_slide.notes_text_frame.text = notes

# =============================================================================
# D√âBUT DE LA PR√âSENTATION - 6 DIAPOSITIVES D'INTRODUCTION √Ä LA FORMATION
# =============================================================================

print("G√©n√©ration de la pr√©sentation Python - Formation 2h...")

# Diapositive 1 : Page de titre principale
add_title_slide(
    prs,
    "PYTHON POUR L'ANALYSE DE DONN√âES",
    "Formation Jour 1 - Fondamentaux\n"
    "Dur√©e : 2h (9h00 - 11h00)\n"
    "Dates : 6-7, 13-14, 20-21 octobre 2025\n\n"
    "Formateur : [Votre nom]\n"
    "Contact : [votre.email@domaine.fr]",
    notes="""NOTES PR√âSENTATEUR :
    
    ACCUEIL ET MISE EN CONTEXTE (10 min) :
    - Souhaiter la bienvenue √† tous les participants
    - Se pr√©senter bri√®vement (nom, exp√©rience, domaines d'expertise)
    - Expliquer le contexte de cette formation sur 4 jours
    - Mentionner que cette session de 2h pose les fondements
    
    POINTS CL√âS √Ä MENTIONNER :
    - Cette formation s'adresse aux d√©veloppeurs, data analysts, scientifiques
    - Pr√©requis : connaissances de base en Python
    - Approche tr√®s pratique avec 70% de pratique, 30% th√©orie
    - Outils : Jupyter Notebook, PyCharm/VS Code, biblioth√®ques principales
    
    CR√âER L'AMBIANCE :
    - Formation interactive, encourager les questions
    - L'objectif est que chacun reparte avec des bases solides
    - Nous couvrirons beaucoup de terrain en 2h, donc rythme soutenu"""
)

# Diapositive 2 : Tour de table et pr√©sentation des participants
add_content_slide(
    prs,
    "Faisons connaissance",
    "TOUR DE TABLE (10 minutes)\n\n"
    "Pour chaque participant :\n"
    "‚Ä¢ Nom et fonction\n"
    "‚Ä¢ Entreprise/organisation\n"
    "‚Ä¢ Exp√©rience actuelle avec Python\n"
    "‚Ä¢ Objectifs et attentes pour cette formation\n"
    "‚Ä¢ Domaines d'application vis√©s\n\n"
    "üí° Cela nous permettra d'adapter les exemples √† vos besoins !",
    notes="""NOTES PR√âSENTATEUR :
    
    GESTION DU TOUR DE TABLE :
    - Limiter chaque pr√©sentation √† 1-2 minutes maximum
    - Prendre des notes sur les profils pour adapter les exemples
    - Identifier les niveaux : d√©butants, interm√©diaires, avanc√©s
    - Noter les domaines d'application mentionn√©s
    
    QUESTIONS √Ä POSER SI N√âCESSAIRE :
    - "Avez-vous d√©j√† utilis√© Pandas/NumPy ?"
    - "Travaillez-vous avec des donn√©es ? Quel type ?"
    - "Quels sont vos outils actuels d'analyse ?"
    
    ADAPTER LE CONTENU :
    - Si beaucoup de d√©butants ‚Üí insister sur les bases
    - Si profils avanc√©s ‚Üí aller plus vite sur la syntaxe
    - Noter les cas d'usage pour les exemples"""
)

# Diapositive 3 : Vue d'ensemble de la formation compl√®te
add_content_slide(
    prs,
    "Programme de formation - Vue d'ensemble",
    "üìÖ JOUR 1 (aujourd'hui) : Fondamentaux de Python\n"
    "   ‚Ä¢ Historique, syntaxe, types de donn√©es\n"
    "   ‚Ä¢ Structures de contr√¥le, fonctions, POO\n"
    "   ‚Ä¢ Gestion des fichiers (apr√®s-midi)\n\n"
    "üìÖ JOUR 2 : Manipulation et Visualisation\n"
    "   ‚Ä¢ NumPy, Pandas, Matplotlib\n"
    "   ‚Ä¢ Gestion des exceptions\n\n"
    "üìÖ JOUR 3 : Bases de donn√©es et Machine Learning\n"
    "   ‚Ä¢ SQL, serveurs web, TensorFlow/Keras\n\n"
    "üìÖ JOUR 4 : Optimisation et √©valuations\n"
    "   ‚Ä¢ Programmation asynchrone, projets pratiques",
    notes="""NOTES PR√âSENTATEUR :
    
    VISION GLOBALE :
    - Expliquer la progression p√©dagogique sur 4 jours
    - Insister sur l'approche en spirale : on revient sur les concepts
    - Chaque jour s'appuie sur le pr√©c√©dent
    
    AUJOURD'HUI SP√âCIFIQUEMENT :
    - 2h de th√©orie intensive sur les fondamentaux
    - L'apr√®s-midi sera consacr√© aux ateliers pratiques
    - Important de bien ma√Ætriser les bases pour la suite
    
    RASSURER LES PARTICIPANTS :
    - Rythme intensif mais progression logique
    - Beaucoup de pratique d√®s cet apr√®s-midi
    - Support et ressources disponibles"""
)

# Diapositive 4 : Objectifs p√©dagogiques de la matin√©e
add_content_slide(
    prs,
    "Objectifs de cette session (9h00-11h00)",
    "üéØ √Ä la fin de ces 2 heures, vous saurez :\n\n"
    "‚úÖ Pourquoi Python est devenu incontournable en data science\n"
    "‚úÖ Ma√Ætriser la syntaxe fondamentale de Python\n"
    "‚úÖ Manipuler les types de donn√©es essentiels\n"
    "‚úÖ Utiliser les structures de contr√¥le (if, for, while)\n"
    "‚úÖ Cr√©er et utiliser des fonctions\n"
    "‚úÖ Comprendre les bases de la POO\n"
    "‚úÖ Organiser son code avec les modules\n\n"
    "üìã Base solide pour les ateliers de cet apr√®s-midi !",
    notes="""NOTES PR√âSENTATEUR :
    
    OBJECTIFS P√âDAGOGIQUES CLAIRS :
    - Expliquer que ces objectifs sont mesurables
    - √Ä la fin, faire un r√©capitulatif pour v√©rifier l'atteinte
    - Ces bases sont essentielles pour NumPy/Pandas
    
    GESTION DES ATTENTES :
    - 2h c'est court pour tout voir en d√©tail
    - On privil√©gie la compr√©hension globale
    - L'approfondissement se fera en pratique
    
    LIEN AVEC LA SUITE :
    - Expliquer pourquoi chaque point est important
    - Les fonctions ‚Üí pour structurer les analyses
    - La POO ‚Üí pour comprendre Pandas
    - Les modules ‚Üí pour les biblioth√®ques scientifiques"""
)

# Diapositive 5 : M√©thodologie et outils
add_two_column_slide(
    prs,
    "M√©thodologie et outils de travail",
    "üìö M√âTHODOLOGIE :\n\n"
    "‚Ä¢ 70% pratique, 30% th√©orie\n"
    "‚Ä¢ Ateliers guid√©s pas √† pas\n"
    "‚Ä¢ Exemples concrets et applicables\n"
    "‚Ä¢ Questions encourag√©es √† tout moment\n"
    "‚Ä¢ Apprentissage par l'erreur\n\n"
    "‚ö° RYTHME SOUTENU :\n"
    "‚Ä¢ Beaucoup de contenu en 2h\n"
    "‚Ä¢ Focus sur l'essentiel\n"
    "‚Ä¢ Approfondissement en TP",
    "üõ†Ô∏è OUTILS UTILIS√âS :\n\n"
    "‚Ä¢ Python 3.8+ (Anaconda/Miniconda)\n"
    "‚Ä¢ Jupyter Notebook\n"
    "‚Ä¢ PyCharm ou VS Code\n"
    "‚Ä¢ Biblioth√®ques : NumPy, Pandas, Matplotlib\n\n"
    "üíª ENVIRONNEMENT :\n"
    "‚Ä¢ Installation cet apr√®s-midi (11h-12h30)\n"
    "‚Ä¢ Environnements virtuels\n"
    "‚Ä¢ Gestion des d√©pendances avec pip/conda",
    notes="""NOTES PR√âSENTATEUR :
    
    RASSURER SUR LA M√âTHODOLOGIE :
    - Pas de cours magistral passif
    - Interaction permanente souhait√©e
    - Droit √† l'erreur, c'est formateur
    
    EXPLIQUER LE RYTHME :
    - 2h de contenu dense mais structur√©
    - Pauses courtes si n√©cessaire
    - L'installation sera faite ensemble cet apr√®s-midi
    
    OUTILS :
    - Ne pas s'inqui√©ter si pas encore install√©
    - On utilisera l'interpr√©teur Python de base ce matin
    - Jupyter/IDE cet apr√®s-midi pour les TP"""
)

# Diapositive 6 : Plan d√©taill√© de la matin√©e
add_content_slide(
    prs,
    "Plan d√©taill√© de la matin√©e",
    "‚è∞ 9h00-9h15 : Accueil et pr√©sentation (15min)\n\n"
    "‚è∞ 9h15-9h45 : Historique et int√©r√™t de Python (30min)\n"
    "   ‚Ä¢ Pourquoi Python ? √âcosyst√®me, communaut√©\n"
    "   ‚Ä¢ Concurrents et positionnement\n\n"
    "‚è∞ 9h45-10h30 : Syntaxe et types de donn√©es (45min)\n"
    "   ‚Ä¢ Variables, types simples et complexes\n"
    "   ‚Ä¢ Listes, tuples, dictionnaires\n\n"
    "‚è∞ 10h30-11h00 : Structures et concepts avanc√©s (30min)\n"
    "   ‚Ä¢ Conditions, boucles, fonctions\n"
    "   ‚Ä¢ Introduction POO et modules\n\n"
    "üéØ Questions/r√©ponses int√©gr√©es tout au long !",
    notes="""NOTES PR√âSENTATEUR :
    
    GESTION DU TEMPS :
    - Respecter scrupuleusement les cr√©neaux
    - Pr√©voir une marge sur chaque section
    - Si retard, prioriser les concepts essentiels
    
    TRANSITIONS :
    - Annoncer clairement les transitions
    - Faire des liens entre les parties
    - Rappeler o√π on en est dans le programme
    
    INTERACTION :
    - Poser des questions pour v√©rifier la compr√©hension
    - Inviter aux questions √† tout moment
    - Utiliser des exemples du tour de table"""
)

# =============================================================================
# COURS PRINCIPAL - 45 DIAPOSITIVES SUR PYTHON
# =============================================================================

# SECTION 1 : HISTORIQUE ET INT√âR√äT (9h15-9h45)
add_section_slide(
    prs, 
    "HISTORIQUE ET INT√âR√äT DE PYTHON",
    "Pourquoi Python est-il devenu le langage de r√©f√©rence en data science ?",
    notes="""SECTION 1 - 30 MINUTES
    
    OBJECTIFS DE CETTE SECTION :
    - Comprendre les raisons du succ√®s de Python
    - Situer Python par rapport √† la concurrence
    - D√©couvrir l'√©cosyst√®me et la communaut√©
    
    APPROCHE P√âDAGOGIQUE :
    - Partir de l'exp√©rience des participants
    - Montrer des chiffres concrets
    - Exemples d'entreprises utilisatrices"""
)

# Diapositive 7 : Naissance et √©volution de Python
add_content_slide(
    prs,
    "Naissance et √©volution de Python",
    "üë®‚Äçüíª CR√âATEUR : Guido van Rossum (1989-1991)\n"
    "   ‚Ä¢ D√©velopp√© aux Pays-Bas (CWI)\n"
    "   ‚Ä¢ Nom inspir√© des 'Monty Python'\n"
    "   ‚Ä¢ 'Benevolent Dictator For Life' jusqu'en 2018\n\n"
    "üìà √âVOLUTION DES VERSIONS :\n"
    "   ‚Ä¢ Python 1.0 (1994) - Premi√®res bases\n"
    "   ‚Ä¢ Python 2.0 (2000) - Listes en compr√©hension\n"
    "   ‚Ä¢ Python 3.0 (2008) - Rupture de compatibilit√©\n"
    "   ‚Ä¢ Python 3.9+ (2020+) - Performances optimis√©es\n\n"
    "üèÜ Aujourd'hui : Langage n¬∞1 selon TIOBE Index !",
    notes="""NOTES PR√âSENTATEUR :
    
    ANECDOTES INT√âRESSANTES :
    - Guido van Rossum travaille maintenant chez Microsoft
    - Le nom vient du groupe comique, pas du serpent
    - Python 2 vs 3 : grande migration achev√©e en 2020
    
    INTERAGIR AVEC L'AUDIENCE :
    - "Qui a d√©j√† utilis√© Python 2 ?"
    - "Quelles versions utilisez-vous actuellement ?"
    
    CHIFFRES MARQUANTS :
    - +200% de croissance d'usage depuis 2017
    - Language of the year 2021 selon TIOBE"""
)

# Diapositive 8 : Caract√©ristiques techniques cl√©s
add_two_column_slide(
    prs,
    "Caract√©ristiques techniques de Python",
    "‚úÖ AVANTAGES :\n\n"
    "‚Ä¢ Langage INTERPR√âT√â\n"
    "  ‚Üí Pas de compilation\n"
    "  ‚Üí Test imm√©diat du code\n\n"
    "‚Ä¢ PORTABILIT√â totale\n"
    "  ‚Üí Windows, Mac, Linux\n"
    "  ‚Üí M√™me code partout\n\n"
    "‚Ä¢ SYNTAXE SIMPLE\n"
    "  ‚Üí Lisible comme l'anglais\n"
    "  ‚Üí Moins d'erreurs\n\n"
    "‚Ä¢ TYPAGE DYNAMIQUE\n"
    "  ‚Üí Flexibilit√© maximale\n"
    "  ‚Üí Productivit√© accrue",
    "‚ö†Ô∏è INCONV√âNIENTS :\n\n"
    "‚Ä¢ VITESSE D'EX√âCUTION\n"
    "  ‚Üí Plus lent que C/C++\n"
    "  ‚Üí Compens√© par les biblioth√®ques\n\n"
    "‚Ä¢ GIL (Global Interpreter Lock)\n"
    "  ‚Üí Limite le multithreading\n"
    "  ‚Üí Solutions : multiprocessing\n\n"
    "‚Ä¢ CONSOMMATION M√âMOIRE\n"
    "  ‚Üí Plus gourmand\n"
    "  ‚Üí Non critique sur machines modernes\n\n"
    "üéØ Bilan : Avantages >> Inconv√©nients\n"
    "pour l'analyse de donn√©es !",
    notes="""NOTES PR√âSENTATEUR :
    
    EXPLIQUER LES CONCEPTS TECHNIQUES :
    - Interpr√©t√© vs compil√© : montrer avec un exemple simple
    - GIL : concept avanc√©, ne pas trop d√©tailler maintenant
    - Vitesse : NumPy/Pandas utilisent du C optimis√©
    
    RASSURER SUR LES INCONV√âNIENTS :
    - La vitesse n'est pas critique pour l'analyse de donn√©es
    - Les biblioth√®ques scientifiques sont tr√®s optimis√©es
    - La productivit√© compense largement
    
    EXEMPLES CONCRETS :
    - Instagram, YouTube utilisent Python massivement
    - NASA, CERN l'utilisent pour les calculs scientifiques"""
)

# Diapositive 9 : Python pour la data science - Pourquoi ce choix ?
add_content_slide(
    prs,
    "Pourquoi Python pour la Data Science ?",
    "üöÄ PRODUCTIVIT√â EXCEPTIONNELLE :\n"
    "   ‚Ä¢ Code 5x plus concis que Java\n"
    "   ‚Ä¢ Prototypage rapide\n"
    "   ‚Ä¢ Debug facilit√©\n\n"
    "üìö √âCOSYST√àME RICHE :\n"
    "   ‚Ä¢ NumPy : calcul scientifique\n"
    "   ‚Ä¢ Pandas : manipulation de donn√©es\n"
    "   ‚Ä¢ Matplotlib/Seaborn : visualisation\n"
    "   ‚Ä¢ Scikit-learn : machine learning\n"
    "   ‚Ä¢ TensorFlow/PyTorch : deep learning\n\n"
    "üë• COMMUNAUT√â ACTIVE :\n"
    "   ‚Ä¢ 400,000+ packages sur PyPI\n"
    "   ‚Ä¢ Documentation excellente\n"
    "   ‚Ä¢ Support communautaire",
    notes="""NOTES PR√âSENTATEUR :
    
    EXPLIQUER LA PRODUCTIVIT√â :
    - Montrer un exemple simple de code Python vs autre langage
    - Expliquer la philosophie "batteries included"
    - Temps de d√©veloppement divis√© par 3-4 en moyenne
    
    √âCOSYST√àME :
    - Ces biblioth√®ques seront vues dans les jours suivants
    - Chacune est un standard dans son domaine
    - Interop√©rabilit√© excellente entre elles
    
    COMMUNAUT√â :
    - Stack Overflow : Python dans le top 3 des questions
    - PyPI : plus grand d√©p√¥t de packages au monde
    - Conf√©rences : PyCon dans chaque pays"""
)

# Diapositive 10 : La concurrence - Comparaison objective
add_content_slide(
    prs,
    "Python face √† la concurrence",
    "üî¨ MATLAB :\n"
    "   ‚úÖ Tr√®s performant pour le calcul num√©rique\n"
    "   ‚ùå Propri√©taire, co√ªteux, syntaxe sp√©cifique\n\n"
    "üìä R :\n"
    "   ‚úÖ Excellence en statistiques\n"
    "   ‚ùå Courbe d'apprentissage, moins polyvalent\n\n"
    "‚òï JAVA :\n"
    "   ‚úÖ Performance, robustesse enterprise\n"
    "   ‚ùå Verbosit√©, complexit√©, moins adapt√© √† la data\n\n"
    "‚ö° JULIA :\n"
    "   ‚úÖ Performance native, syntaxe moderne\n"
    "   ‚ùå √âcosyst√®me encore limit√©, communaut√© r√©duite",
    notes="""NOTES PR√âSENTATEUR :
    
    RESTER OBJECTIF :
    - Chaque langage a ses domaines d'excellence
    - Python n'est pas parfait partout
    - Le choix d√©pend du contexte et des √©quipes
    
    EXP√âRIENCE DES PARTICIPANTS :
    - "Qui a d√©j√† utilis√© R/MATLAB/Java ?"
    - Recueillir les retours d'exp√©rience
    - Expliquer les migrations vers Python
    
    TENDANCES ACTUELLES :
    - Python gagne des parts de march√© chaque ann√©e
    - Migration progressive depuis R et MATLAB
    - Choix par d√©faut des nouvelles √©quipes data"""
)

# Diapositive 11 : L'√©cosyst√®me Python - Vue d'ensemble
add_two_column_slide(
    prs,
    "L'√©cosyst√®me Python pour la Data Science",
    "üßÆ CALCUL SCIENTIFIQUE :\n"
    "‚Ä¢ NumPy - Arrays multidimensionnels\n"
    "‚Ä¢ SciPy - Algorithmes scientifiques\n"
    "‚Ä¢ SymPy - Calcul symbolique\n\n"
    "üìä MANIPULATION DE DONN√âES :\n"
    "‚Ä¢ Pandas - DataFrames et s√©ries\n"
    "‚Ä¢ Polars - Alternative haute performance\n"
    "‚Ä¢ Dask - Calcul parall√®le\n\n"
    "üìà VISUALISATION :\n"
    "‚Ä¢ Matplotlib - Graphiques de base\n"
    "‚Ä¢ Seaborn - Visualisation statistique\n"
    "‚Ä¢ Plotly - Graphiques interactifs",
    "ü§ñ MACHINE LEARNING :\n"
    "‚Ä¢ Scikit-learn - ML classique\n"
    "‚Ä¢ TensorFlow - Deep Learning Google\n"
    "‚Ä¢ PyTorch - Deep Learning Facebook\n"
    "‚Ä¢ Keras - Interface haut niveau\n\n"
    "üîß OUTILS COMPL√âMENTAIRES :\n"
    "‚Ä¢ Jupyter - Notebooks interactifs\n"
    "‚Ä¢ Anaconda - Distribution scientifique\n"
    "‚Ä¢ Streamlit - Applications web\n"
    "‚Ä¢ FastAPI - APIs modernes\n\n"
    "üíæ DONN√âES :\n"
    "‚Ä¢ SQLAlchemy - Base de donn√©es\n"
    "‚Ä¢ Requests - APIs REST",
    notes="""NOTES PR√âSENTATEUR :
    
    NE PAS TOUT D√âTAILLER MAINTENANT :
    - Vue d'ensemble pour montrer la richesse
    - Nous verrons NumPy/Pandas/Matplotlib en d√©tail demain
    - Les autres selon les besoins des participants
    
    EXPLIQUER LA COMPL√âMENTARIT√â :
    - Ces outils se combinent naturellement
    - Pandas utilise NumPy, Matplotlib utilise NumPy, etc.
    - √âcosyst√®me coh√©rent et int√©gr√©
    
    √âVOLUTION RAPIDE :
    - Nouveaux outils r√©guli√®rement
    - Communaut√© tr√®s active
    - Importance de rester √† jour"""
)

# Diapositive 12 : Classement et adoption industrielle
add_content_slide(
    prs,
    "Python dans l'industrie - Chiffres cl√©s 2024",
    "üìà CLASSEMENTS :\n"
    "   ‚Ä¢ TIOBE Index : #1 mondial\n"
    "   ‚Ä¢ IEEE Spectrum : #1 pour 4√®me ann√©e\n"
    "   ‚Ä¢ Stack Overflow : #3 le plus aim√©\n"
    "   ‚Ä¢ GitHub : #2 en nombre de projets\n\n"
    "üè¢ ADOPTIONS NOTABLES :\n"
    "   ‚Ä¢ Netflix ‚Üí Syst√®mes de recommandation\n"
    "   ‚Ä¢ Instagram ‚Üí Backend principal\n"
    "   ‚Ä¢ NASA ‚Üí Analyse de donn√©es spatiales\n"
    "   ‚Ä¢ Spotify ‚Üí Analytics et ML\n"
    "   ‚Ä¢ Uber ‚Üí Tarification dynamique\n\n"
    "üíº MARCH√â DE L'EMPLOI :\n"
    "   ‚Ä¢ +35% d'offres Python en 2 ans\n"
    "   ‚Ä¢ Salaires moyens : 55-75k‚Ç¨ en France",
    notes="""NOTES PR√âSENTATEUR :
    
    CHIFFRES R√âCENTS :
    - Mettre √† jour avec les derni√®res donn√©es disponibles
    - Montrer la progression constante
    - Expliquer les m√©thodologies de classement
    
    CAS D'USAGE INSPIRANTS :
    - Netflix : algorithmes de recommandation pour 200M+ users
    - Instagram : g√®re des milliards de photos
    - NASA : traitement d'images satellite et t√©lescope
    
    OPPORTUNIT√âS PROFESSIONNELLES :
    - March√© en forte croissance
    - Comp√©tence tr√®s recherch√©e
    - Polyvalence : dev, data, ML, ops"""
)

# SECTION 2 : SYNTAXE ET TYPES DE DONN√âES (9h45-10h30)
add_section_slide(
    prs, 
    "SYNTAXE DE BASE ET TYPES DE DONN√âES",
    "Les fondements du langage Python",
    notes="""SECTION 2 - 45 MINUTES
    
    PARTIE LA PLUS IMPORTANTE :
    - 50% du temps sur cette section
    - Concepts essentiels pour la suite
    - Beaucoup d'exemples pratiques
    
    GESTION DU TEMPS :
    - Variables et types simples : 15 min
    - Structures de donn√©es : 20 min  
    - Op√©rateurs et expressions : 10 min
    
    INTERACTIVIT√â :
    - Montrer les exemples en direct si possible
    - Faire participer avec des questions simples
    - Encourager √† noter les concepts nouveaux"""
)

# Diapositive 13 : Premiers pas - Variables et affectation
add_code_slide(
    prs,
    "Premiers pas : Variables et affectation",
    """# En Python, pas besoin de d√©clarer le type !
nom = "Alice"           # String (cha√Æne de caract√®res)
age = 30               # Integer (entier)
taille = 1.65          # Float (nombre √† virgule)
est_majeur = True      # Boolean (bool√©en)

# V√©rification des types
print(type(nom))       # <class 'str'>
print(type(age))       # <class 'int'>
print(type(taille))    # <class 'float'>
print(type(est_majeur)) # <class 'bool'>""",
    explanation="Le typage dynamique : Python d√©termine automatiquement le type",
    notes="""NOTES PR√âSENTATEUR :

CONCEPTS CL√âS √Ä EXPLIQUER :
- Typage dynamique vs statique (Java, C++)
- Pas de d√©claration de type n√©cessaire
- Type d√©termin√© √† l'ex√©cution
- Fonction type() pour v√©rifier

D√âMONSTRATION INTERACTIVE :
- Taper ces exemples en direct dans un interpr√©teur
- Montrer le r√©sultat de print(type(...))
- Expliquer les noms de classes Python

ATTENTION AUX D√âBUTANTS :
- Variables sensibles √† la casse : Age ‚â† age
- Conventions de nommage : snake_case recommand√©
- Mots r√©serv√©s interdits comme noms de variables"""
)

# Diapositive 14 : Affectations multiples et √©change de variables
add_code_slide(
    prs,
    "Affectations multiples et √©changes",
    """# Affectations multiples
a = b = c = 5          # M√™me valeur √† toutes
print(a, b, c)         # 5 5 5

# Affectation parall√®le (unpacking)
x, y, z = 10, 20, 30   # Assigne en parall√®le
print(x, y, z)         # 10 20 30

# Le fameux √©change de variables Python !
a = 100
b = 200
print("Avant:", a, b)   # Avant: 100 200

# √âchange en une seule ligne (magique!)
a, b = b, a
print("Apr√®s:", a, b)   # Apr√®s: 200 100""",
    explanation="Python permet des affectations √©l√©gantes et concises",
    notes="""NOTES PR√âSENTATEUR :

√âMERVEILLER L'AUDIENCE :
- L'√©change de variables en une ligne est iconique Python
- Dans d'autres langages : 3 lignes avec variable temporaire
- Montrer la diff√©rence avec Java/C++

CONCEPT TECHNIQUE :
- Unpacking = d√©ballage de s√©quence
- C√¥t√© droit √©valu√© en premier (tuple temporaire)
- Tr√®s utilis√© en data science pour les coordonn√©es

EXERCICE MENTAL :
- Faire deviner le r√©sultat avant d'ex√©cuter
- Expliquer pourquoi √ßa marche
- Applications pratiques"""
)

# Diapositive 15 : Op√©rateurs arithm√©tiques et comparaisons
add_code_slide(
    prs,
    "Op√©rateurs essentiels",
    """# Op√©rateurs arithm√©tiques
a, b = 10, 3
print(a + b)    # 13 - Addition
print(a - b)    # 7  - Soustraction  
print(a * b)    # 30 - Multiplication
print(a / b)    # 3.333... - Division (toujours float en Python 3)
print(a // b)   # 3  - Division enti√®re
print(a % b)    # 1  - Modulo (reste)
print(a ** b)   # 1000 - Puissance

# Comparaisons (r√©sultat = bool√©en)
print(a > b)    # True
print(a == b)   # False
print(a != b)   # True

# Op√©rateurs logiques
print(True and False)  # False
print(True or False)   # True
print(not True)        # False""",
    explanation="Attention √† la division : / donne toujours un float, // pour l'entier",
    notes="""NOTES PR√âSENTATEUR :

PI√àGE CLASSIQUE Python 2 vs 3 :
- Python 2 : 10/3 = 3 (division enti√®re)
- Python 3 : 10/3 = 3.333... (division flottante)
- Toujours utiliser // pour division enti√®re

UTILIT√â DU MODULO :
- V√©rifier parit√© : x % 2 == 0
- Op√©rations cycliques (horaires, calendriers)
- Algorithmes de hachage

OP√âRATEURS LOGIQUES :
- and, or, not (mots anglais, pas symboles)
- Court-circuit : and s'arr√™te au premier False
- Diff√©rent de & | (op√©rateurs bit √† bit)"""
)

# Diapositive 16 : Cha√Ænes de caract√®res - Manipulation de base
add_code_slide(
    prs,
    "Cha√Ænes de caract√®res (Strings)",
    """# Cr√©ation de cha√Ænes
nom = 'Alice'           # Guillemets simples
message = "Bonjour!"    # Guillemets doubles  
long_text = """Texte
sur plusieurs
lignes"""               # Triple guillemets

# Indexation et slicing
prenom = "Jean-Michel"
print(prenom[0])        # 'J' - Premier caract√®re
print(prenom[-1])       # 'l' - Dernier caract√®re
print(prenom[0:4])      # 'Jean' - Slice d√©but:fin
print(prenom[5:])       # 'Michel' - Slice du 5√®me √† la fin

# Op√©rations sur cha√Ænes
print(len(prenom))      # 11 - Longueur
print("jean" in prenom.lower())  # True - Recherche
print(prenom.upper())   # 'JEAN-MICHEL' - Majuscules""",
    explanation="Les strings sont IMMUABLES : on ne peut pas les modifier directement",
    notes="""NOTES PR√âSENTATEUR :

CONCEPT D'IMMUTABILIT√â :
- prenom[0] = 'P' ‚Üí ERREUR !
- Il faut cr√©er une nouvelle cha√Æne
- Optimisation m√©moire de Python

INDEXATION N√âGATIVE :
- Tr√®s utile en Python : -1 = dernier, -2 = avant-dernier
- √âvite de calculer len(chaine) - 1

SLICING AVANC√â :
- [d√©but:fin:pas] : prenom[::2] tous les 2 caract√®res
- [::-1] pour inverser une cha√Æne
- Tr√®s utilis√© en manipulation de donn√©es"""
)

# Diapositive 17 : Formatage de cha√Ænes moderne
add_code_slide(
    prs,
    "Formatage de cha√Ænes - f-strings (Python 3.6+)",
    """nom = "Marie"
age = 28
taille = 1.68

# Ancienne m√©thode (√† √©viter)
message1 = "Je m'appelle " + nom + " et j'ai " + str(age) + " ans"

# M√©thode format() (acceptable)
message2 = "Je m'appelle {} et j'ai {} ans".format(nom, age)

# f-strings (recommand√©e !) ‚≠ê
message3 = f"Je m'appelle {nom} et j'ai {age} ans"
print(message3)  # Je m'appelle Marie et j'ai 28 ans

# f-strings avec expressions
print(f"Taille: {taille:.1f}m")           # Taille: 1.7m
print(f"Dans 5 ans: {age + 5} ans")       # Dans 5 ans: 33 ans
print(f"Majeure: {age >= 18}")            # Majeure: True""",
    explanation="Les f-strings : plus lisibles, plus rapides, plus puissantes !",
    notes="""NOTES PR√âSENTATEUR :

√âVOLUTION DU FORMATAGE :
- Concat√©nation (+) : lente et peu lisible
- .format() : am√©lioration mais verbeux
- f-strings : r√©volution depuis Python 3.6

AVANTAGES f-strings :
- Plus rapides √† l'ex√©cution
- Plus lisibles et maintenables
- Expressions directement int√©gr√©es
- Formatage puissant int√©gr√©

FORMATAGE AVANC√â :
- {valeur:.2f} : 2 d√©cimales
- {valeur:>10} : align√© √† droite sur 10 caract√®res
- {valeur:,} : s√©parateurs de milliers"""
)

# Diapositive 18 : Listes - Le type de donn√©es fondamental
add_code_slide(
    prs,
    "Listes : La structure de donn√©es fondamentale",
    """# Cr√©ation et manipulation de base
nombres = [1, 5, 3, 9, 2]
print(nombres)              # [1, 5, 3, 9, 2]

# Listes h√©t√©rog√®nes (types m√©lang√©s)
mixte = ["Alice", 25, True, 3.14]
print(mixte)               # ['Alice', 25, True, 3.14]

# Acc√®s aux √©l√©ments (comme les strings)
print(nombres[0])          # 1 - Premier √©l√©ment
print(nombres[-1])         # 2 - Dernier √©l√©ment
print(nombres[1:4])        # [5, 3, 9] - Slice

# Modification (MUTABLE !)
nombres[0] = 100
print(nombres)             # [100, 5, 3, 9, 2]

# Longueur
print(len(nombres))        # 5""",
    explanation="Contrairement aux strings, les listes sont MUTABLES (modifiables)",
    notes="""NOTES PR√âSENTATEUR :

DIFF√âRENCE CRUCIALE :
- Strings : immutables
- Listes : mutables
- Cons√©quences importantes pour les fonctions

LISTES H√âT√âROG√àNES :
- Sp√©cificit√© Python (pas toujours possible ailleurs)
- Utile mais attention aux types en data science
- NumPy pr√©f√©rera les types homog√®nes

INDEXATION ET SLICING :
- M√™mes r√®gles que les strings
- Tr√®s utilis√© en analyse de donn√©es
- Base pour comprendre NumPy arrays"""
)

# Diapositive 19 : M√©thodes des listes
add_code_slide(
    prs,
    "M√©thodes essentielles des listes",
    """ma_liste = [3, 1, 4, 1, 5]
print("Liste initiale:", ma_liste)

# Ajouter des √©l√©ments
ma_liste.append(9)              # Ajoute √† la fin
print("Apr√®s append(9):", ma_liste)

ma_liste.insert(2, 2)           # Insert 2 √† l'index 2
print("Apr√®s insert(2,2):", ma_liste)

# Supprimer des √©l√©ments  
ma_liste.remove(1)              # Supprime la premi√®re occurrence de 1
print("Apr√®s remove(1):", ma_liste)

element = ma_liste.pop()        # Supprime et retourne le dernier
print(f"√âl√©ment supprim√©: {element}, Liste: {ma_liste}")

# Trier et organiser
ma_liste.sort()                 # Trie sur place
print("Apr√®s sort():", ma_liste)

ma_liste.reverse()              # Inverse l'ordre
print("Apr√®s reverse():", ma_liste)""",
    explanation="Attention : ces m√©thodes modifient la liste originale !",
    notes="""NOTES PR√âSENTATEUR :

M√âTHODES QUI MODIFIENT :
- append(), insert(), remove(), pop(), sort(), reverse()
- Modifient la liste originale (pas de return)
- Diff√©rent de sorted() qui retourne une nouvelle liste

DIFF√âRENCE IMPORTANTE :
- ma_liste.sort() : modifie ma_liste, retourne None
- sorted(ma_liste) : retourne nouvelle liste tri√©e

CAS D'USAGE :
- append() : construction de liste en boucle
- remove() : nettoyage de donn√©es
- sort() : pr√©paration pour analyse"""
)

# Diapositive 20 : Tuples - Les listes immuables
add_code_slide(
    prs,
    "Tuples : Listes immuables",
    """# Cr√©ation de tuples
point = (10, 20)              # Coordonn√©es x, y
couleur = (255, 0, 128)       # RGB
info = ("Alice", 30, "Paris") # Nom, √¢ge, ville

# Parenth√®ses optionnelles (mais recommand√©es)
dimensions = 1920, 1080       # R√©solution √©cran
print(type(dimensions))       # <class 'tuple'>

# Tuple √† un seul √©l√©ment (attention √† la virgule !)
singleton = (42,)             # Virgule obligatoire
pas_tuple = (42)              # C'est juste 42 entre parenth√®ses

# Acc√®s aux √©l√©ments (comme listes)
print(point[0])               # 10
print(info[1:])               # (30, 'Paris')

# IMPOSSIBLE de modifier !
# point[0] = 15               # ‚ùå ERREUR !

# Unpacking tr√®s utile
x, y = point
nom, age, ville = info
print(f"Coordonn√©es: x={x}, y={y}")""",
    explanation="Tuples = listes non modifiables, parfaites pour donn√©es fixes",
    notes="""NOTES PR√âSENTATEUR :

QUAND UTILISER LES TUPLES :
- Coordonn√©es, couleurs RGB
- Donn√©es qui ne doivent pas changer
- Cl√©s de dictionnaire (immuables)
- Return de plusieurs valeurs de fonction

PI√àGE CLASSIQUE :
- (42) n'est PAS un tuple, c'est 42
- (42,) EST un tuple √† un √©l√©ment
- Python a besoin de la virgule

UNPACKING PUISSANT :
- x, y = point tr√®s idiomatique
- √âchange de variables : a, b = b, a
- Parcours de listes de tuples"""
)

# Diapositive 21 : Dictionnaires - Cl√©s et valeurs
add_code_slide(
    prs,
    "Dictionnaires : Associations cl√©-valeur",
    """# Cr√©ation de dictionnaires
personne = {
    "nom": "Dupont",
    "prenom": "Jean", 
    "age": 35,
    "ville": "Lyon"
}

# Acc√®s aux valeurs
print(personne["nom"])        # "Dupont"
print(personne.get("age"))    # 35
print(personne.get("pays", "France"))  # "France" (valeur par d√©faut)

# Modification et ajout
personne["age"] = 36          # Modification
personne["email"] = "j.dupont@email.com"  # Ajout

# Parcours du dictionnaire  
for cle in personne:          # Parcours des cl√©s
    print(f"{cle}: {personne[cle]}")
    
# Ou plus pythonique :
for cle, valeur in personne.items():
    print(f"{cle}: {valeur}")""",
    explanation="Dictionnaires = tables de hachage, acc√®s tr√®s rapide par cl√©",
    notes="""NOTES PR√âSENTATEUR :

ACC√àS S√âCURIS√â :
- dict["cl√©"] : l√®ve KeyError si cl√© inexistante
- dict.get("cl√©") : retourne None si inexistante
- dict.get("cl√©", "d√©faut") : retourne valeur par d√©faut

TYPES DE CL√âS :
- Seulement types immuables : str, int, tuple
- Pas de listes comme cl√©s !
- Strings le plus courant

PERFORMANCE :
- Acc√®s O(1) en moyenne
- Tr√®s efficace pour lookups
- Base de Pandas DataFrames"""
)

# Diapositive 22 : Compr√©hensions de listes - Python idiomatique
add_code_slide(
    prs,
    "Compr√©hensions de listes (List Comprehensions)",
    """# M√©thode traditionnelle
carres_classique = []
for i in range(5):
    carres_classique.append(i ** 2)
print(carres_classique)       # [0, 1, 4, 9, 16]

# Compr√©hension de liste (pythonique !)
carres_modern = [i ** 2 for i in range(5)]
print(carres_modern)          # [0, 1, 4, 9, 16]

# Avec condition (filtrage)
pairs = [x for x in range(10) if x % 2 == 0]
print(pairs)                  # [0, 2, 4, 6, 8]

# Plus complexe
mots = ["Python", "Java", "C++", "JavaScript"]
longueurs = [len(mot) for mot in mots if len(mot) > 4]
print(longueurs)              # [6, 10] 

# Dictionnaire en compr√©hension
carres_dict = {x: x**2 for x in range(5)}
print(carres_dict)            # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}""",
    explanation="Style Python par excellence : concis, lisible et performant",
    notes="""NOTES PR√âSENTATEUR :

SYNTAXE G√âN√âRALE :
- [expression for item in iterable if condition]
- Plus concis et souvent plus rapide
- Tr√®s utilis√© en data science

LISIBILIT√â :
- Parfois plus complexe √† lire pour d√©butants
- R√®gle : si trop complexe, utiliser boucle classique
- Maximum 2-3 niveaux de compr√©hension

EXTENSIONS :
- Compr√©hensions de dictionnaires : {k: v for...}
- Compr√©hensions d'ensembles : {x for...}
- Expressions g√©n√©ratrices : (x for...)"""
)

# SECTION 3 : STRUCTURES DE CONTR√îLE (10h30-11h00)
add_section_slide(
    prs, 
    "STRUCTURES DE CONTR√îLE ET CONCEPTS AVANC√âS",
    "Conditions, boucles, fonctions et introduction √† la POO",
    notes="""SECTION 3 - 30 MINUTES FINALES
    
    DERNI√àRE LIGNE DROITE :
    - Concepts essentiels rapidement
    - Focus sur la compr√©hension globale
    - Beaucoup d'exemples pratiques
    
    R√âPARTITION :
    - Conditions et boucles : 10 min
    - Fonctions : 10 min
    - POO et modules : 10 min"""
)

# Diapositive 23 : Structures conditionnelles
add_code_slide(
    prs,
    "Conditions : if, elif, else",
    """age = 25
situation = "√©tudiant"

# Structure conditionnelle compl√®te
if age < 18:
    statut = "mineur"
    tarif = 5
elif age < 65:
    if situation == "√©tudiant":
        statut = "√©tudiant"
        tarif = 8
    else:
        statut = "actif" 
        tarif = 12
else:
    statut = "senior"
    tarif = 6

print(f"Statut: {statut}, Tarif: {tarif}‚Ç¨")

# Op√©rateur ternaire (conditionnel inline)
message = "majeur" if age >= 18 else "mineur"
print(f"Vous √™tes {message}")

# Tests de v√©rit√© Python
nom = "Alice"
if nom:  # Cha√Æne non vide = True
    print(f"Bonjour {nom}!")""",
    explanation="L'indentation d√©finit les blocs (pas d'accolades comme en Java/C++)",
    notes="""NOTES PR√âSENTATEUR :

INDENTATION OBLIGATOIRE :
- Pas d'accolades {}, l'indentation structure le code
- 4 espaces recommand√©s (PEP 8)
- Erreur IndentationError si mal indent√©

CONDITIONS PYTHON :
- Pas besoin de parenth√®ses autour de la condition
- elif (pas else if)
- Op√©rateur ternaire utile pour assignations simples

TESTS DE V√âRIT√â :
- Valeurs "falsy" : False, None, 0, "", [], {}
- Tout le reste est "truthy"
- Tr√®s utilis√© pour v√©rifications rapides"""
)

# Diapositive 24 : Boucles for et while
add_code_slide(
    prs,
    "Boucles : for et while",
    """# Boucle for - Iteration directe sur √©l√©ments
fruits = ["pomme", "banane", "orange"]
for fruit in fruits:
    print(f"J'aime les {fruit}s")

# Boucle for avec indices si n√©cessaire
for i, fruit in enumerate(fruits):
    print(f"{i+1}. {fruit}")

# range() pour g√©n√©rer des s√©quences
for i in range(5):              # 0 √† 4
    print(f"Compteur: {i}")
    
for i in range(2, 8, 2):        # 2,4,6 (d√©but, fin, pas)
    print(f"Pair: {i}")

# Boucle while
compteur = 0
while compteur < 3:
    print(f"Tour {compteur + 1}")
    compteur += 1

# Break et continue
for num in range(10):
    if num == 3:
        continue    # Passe √† l'it√©ration suivante
    if num == 7:
        break       # Sort de la boucle
    print(num)""",
    explanation="for pour it√©rer sur des collections, while pour conditions",
    notes="""NOTES PR√âSENTATEUR :

PHILOSOPHIE PYTHON :
- for pour it√©rer directement sur √©l√©ments
- Pas besoin d'indices dans la plupart des cas
- enumerate() quand on a besoin des indices

RANGE() TR√àS UTILIS√â :
- range(n) : 0 √† n-1
- range(start, stop) : start √† stop-1  
- range(start, stop, step) : avec pas

BREAK/CONTINUE :
- break : sort compl√®tement de la boucle
- continue : passe √† l'it√©ration suivante
- Utilis√© pour gestion d'erreurs, filtres"""
)

# Diapositive 25 : Fonctions - Structurer son code
add_code_slide(
    prs,
    "Fonctions : R√©utiliser et structurer",
    """# Fonction simple
def saluer(nom):
    return f"Bonjour {nom} !"

message = saluer("Alice")
print(message)                  # Bonjour Alice !

# Fonction avec plusieurs param√®tres et valeurs par d√©faut
def calculer_prix(prix_ht, tva=0.20, reduction=0):
    prix_ttc = prix_ht * (1 + tva) * (1 - reduction)
    return round(prix_ttc, 2)

# Diff√©rentes fa√ßons d'appeler
print(calculer_prix(100))                    # 120.0
print(calculer_prix(100, 0.10))             # 110.0  
print(calculer_prix(100, reduction=0.15))    # 102.0

# Fonction qui retourne plusieurs valeurs
def analyse_nombre(n):
    est_pair = n % 2 == 0
    est_positif = n > 0
    return est_pair, est_positif

pair, positif = analyse_nombre(42)
print(f"42 est pair: {pair}, positif: {positif}")""",
    explanation="Les fonctions rendent le code modulaire et r√©utilisable",
    notes="""NOTES PR√âSENTATEUR :

BONNES PRATIQUES :
- Noms explicites pour fonctions et param√®tres
- Une fonction = une responsabilit√©
- Documentation avec docstrings (on verra plus tard)

PARAM√àTRES AVANC√âS :
- Valeurs par d√©faut tr√®s utiles
- Appel par nom de param√®tre
- *args et **kwargs pour param√®tres variables

RETOUR MULTIPLE :
- Vraiment un tuple qui est retourn√©
- Unpacking automatique √† l'affectation
- Tr√®s pratique pour coordonn√©es, r√©sultats multiples"""
)

# Diapositive 26 : Port√©e des variables (scope)
add_code_slide(
    prs,
    "Port√©e des variables (scope)",
    """# Variables globales vs locales
compteur_global = 0

def incrementer():
    compteur_local = 1              # Variable locale
    return compteur_local + compteur_global

print(incrementer())                # 1

def modifier_global():
    global compteur_global          # D√©claration explicite
    compteur_global += 1

modifier_global()
print(compteur_global)              # 1

# Attention aux effets de bord avec objets mutables
def ajouter_element(liste, element):
    liste.append(element)           # Modifie la liste originale !
    return liste

ma_liste = [1, 2, 3]
nouvelle_liste = ajouter_element(ma_liste, 4)
print(ma_liste)                     # [1, 2, 3, 4] - Modifi√©e !
print(nouvelle_liste)               # [1, 2, 3, 4] - M√™me objet !""",
    explanation="Attention aux effets de bord : listes/dicts modifi√©s dans fonctions !",
    notes="""NOTES PR√âSENTATEUR :

R√àGLE IMPORTANTE :
- Variables locales masquent les globales
- global n√©cessaire pour modifier variable globale
- √Ä √©viter autant que possible (effet de bord)

OBJETS MUTABLES :
- listes, dictionnaires pass√©s par r√©f√©rence
- Modifications visibles √† l'ext√©rieur de la fonction
- Source de bugs fr√©quents pour d√©butants

BONNES PRATIQUES :
- √âviter les variables globales
- Fonctions pures : m√™me input ‚Üí m√™me output
- Retourner nouvelles valeurs plut√¥t que modifier"""
)

# Diapositive 27 : Introduction √† la POO
add_code_slide(
    prs,
    "Introduction √† la Programmation Orient√©e Objet",
    """# D√©finition d'une classe simple
class Voiture:
    # Attribut de classe (partag√©)
    nb_voitures = 0
    
    # Constructeur
    def __init__(self, marque, modele, annee):
        # Attributs d'instance (propres √† chaque objet)
        self.marque = marque
        self.modele = modele  
        self.annee = annee
        self.kilometrage = 0
        Voiture.nb_voitures += 1
    
    # M√©thodes (comportements)
    def rouler(self, km):
        self.kilometrage += km
        return f"La {self.marque} a roul√© {km} km"
    
    def __str__(self):
        return f"{self.marque} {self.modele} ({self.annee})"

# Utilisation
ma_voiture = Voiture("Toyota", "Corolla", 2020)
print(ma_voiture)                    # Toyota Corolla (2020)
print(ma_voiture.rouler(150))        # La Toyota a roul√© 150 km
print(f"Total voitures: {Voiture.nb_voitures}")""",
    explanation="Classes = mod√®les d'objets, Objets = instances concr√®tes",
    notes="""NOTES PR√âSENTATEUR :

CONCEPTS FONDAMENTAUX :
- Classe = plan/mod√®le, Objet = instance concr√®te
- __init__ = constructeur (appel√© √† la cr√©ation)
- self = r√©f√©rence √† l'instance courante

ATTRIBUTS ET M√âTHODES :
- Attributs de classe vs attributs d'instance
- M√©thodes = fonctions dans une classe
- __str__ = repr√©sentation en cha√Æne

POURQUOI LA POO EN DATA SCIENCE :
- Pandas DataFrame est une classe !
- Structurer code complexe
- R√©utilisabilit√© et maintenance"""
)

# Diapositive 28 : Modules et imports
add_code_slide(
    prs,
    "Modules : Organiser et r√©utiliser le code",
    """# Imports de la biblioth√®que standard
import math
import random
from datetime import datetime, timedelta

# Utilisation
print(math.pi)                      # 3.141592653589793
print(math.sqrt(16))               # 4.0
print(random.randint(1, 10))       # Nombre al√©atoire 1-10

# Calculs de dates
aujourdhui = datetime.now()
demain = aujourdhui + timedelta(days=1)
print(f"Aujourd'hui: {aujourdhui.strftime('%d/%m/%Y')}")

# Import avec alias (tr√®s courant en data science)
import numpy as np                  # Convention universelle !
import pandas as pd                 # Convention universelle !
import matplotlib.pyplot as plt     # Convention universelle !

# Imports conditionnels et gestion d'erreurs
try:
    import tensorflow as tf
    print("TensorFlow disponible")
except ImportError:
    print("TensorFlow non install√©")""",
    explanation="Modules = fichiers Python r√©utilisables, base de l'√©cosyst√®me",
    notes="""NOTES PR√âSENTATEUR :

BIBLIOTH√àQUE STANDARD :
- Tr√®s riche : math, random, datetime, os, sys...
- Pas besoin d'installation
- Documentation excellente

CONVENTIONS DATA SCIENCE :
- np, pd, plt : conventions universelles
- Tout le monde les conna√Æt
- Facilite lecture du code

GESTION DES D√âPENDANCES :
- try/except pour imports optionnels
- pip install pour installer packages
- Requirements.txt pour lister d√©pendances"""
)

# Diapositive 29 : Gestion d'erreurs - try/except (version compl√®te)
add_code_slide(
    prs,
    "Gestion des erreurs avec try/except - Approche compl√®te",
    """# 1. Gestion basique d'une exception sp√©cifique
def diviser(a: float, b: float) -> float:
    try:
        resultat = a / b
        return resultat
    except ZeroDivisionError as e:
        print(f"‚ö†Ô∏è Erreur captur√©e: {type(e).__name__} - {e}")
        return float('nan')  # Retourne NaN (Not a Number) au lieu de None
    except TypeError as e:
        print(f"‚ö†Ô∏è Types incompatibles: {e}")
        return float('nan')

print("Division normale:", diviser(10, 2))  # 5.0
print("Division par z√©ro:", diviser(10, 0))  # Erreur + NaN
print("Types incompatibles:", diviser("10", "2"))  # Erreur + NaN

# 2. Structure compl√®te try/except/else/finally
def traiter_fichier(nom_fichier: str) -> str:
    try:
        with open(nom_fichier, 'r', encoding='utf-8') as f:
            contenu = f.read()
    except FileNotFoundError:
        print(f"‚ùå Fichier '{nom_fichier}' introuvable")
        return ""
    except UnicodeDecodeError:
        print(f"‚ùå Probl√®me d'encodage dans '{nom_fichier}'")
        return ""
    except PermissionError:
        print(f"‚ùå Permission refus√©e pour '{nom_fichier}'")
        return ""
    else:
        print(f"‚úÖ Fichier '{nom_fichier}' lu avec succ√®s")
        return contenu[:50] + "..." if len(contenu) > 50 else contenu
    finally:
        print(f"üîÑ Op√©ration de lecture termin√©e (qu'il y ait eu erreur ou non)")

# Exemple d'utilisation
resultat = traiter_fichier("exemple.txt")
print(f"Contenu extrait: {resultat}")

# 3. Cr√©ation d'exceptions personnalis√©es
class TemperatureInvalideError(Exception):
    """Exception lev√©e pour des temp√©ratures physiquement impossibles"""
    def __init__(self, temperature, message="Temp√©rature invalide"):
        self.temperature = temperature
        self.message = message
        super().__init__(f"{message}: {temperature}¬∞C (z√©ro absolu = -273.15¬∞C)")

def convertir_celsius_fahrenheit(temp_c: float) -> float:
    if temp_c < -273.15:
        raise TemperatureInvalideError(temp_c, "Temp√©rature sous le z√©ro absolu")
    return temp_c * 9/5 + 32

# Test de l'exception personnalis√©e
try:
    print(convertir_celsius_fahrenheit(-300))  # Doit lever une exception
except TemperatureInvalideError as e:
    print(f"‚ùÑÔ∏è {e}")
    print(f"Temp√©rature probl√©matique: {e.temperature}¬∞C")

# 4. Bonnes pratiques de gestion d'erreurs"""
def lire_config(config_path: str) -> dict:
    """Lit un fichier de configuration JSON avec gestion d'erreurs robuste
    import json
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ö†Ô∏è Fichier de config '{config_path}' non trouv√©. Utilisation des valeurs par d√©faut.")
        return {"timeout": 30, "retries": 3}
    except json.JSONDecodeError as e:
        print(f"‚ö†Ô∏è Fichier de config '{config_path}' mal form√©: {e}. Utilisation des valeurs par d√©faut.")
        return {"timeout": 30, "retries": 3}
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur inattendue lors de la lecture de '{config_path}': {e}. Utilisation des valeurs par d√©faut.")
        return {"timeout": 30, "retries": 3}""",
    explanation="""Gestion robuste des erreurs avec :
# 1. Capture d'exceptions sp√©cifiques
2. Utilisation de else/finally
3. Cr√©ation d'exceptions personnalis√©es
4. Bonnes pratiques de fallback""",
    notes="""NOTES PR√âSENTATEUR :

    STRUCTURE COMPL√àTE TRY/EXCEPT :
    - try : code √† surveiller
    - except : gestion des erreurs sp√©cifiques
    - else : ex√©cut√© si pas d'erreur
    - finally : toujours ex√©cut√©

    BONNES PRATIQUES :
    1. Capturer des exceptions SP√âCIFIQUES (pas juste Exception)
    2. Toujours fournir un message d'erreur utile
    3. Utiliser finally pour le nettoyage (fermeture de fichiers, etc.)
    4. Pr√©voir des valeurs de fallback quand possible
    5. Logger les erreurs pour le d√©bogage

    EXCEPTIONS PERSONNALIS√âES :
    - H√©ritent de Exception ou sous-classes
    - Utile pour domaine sp√©cifique (ex: validation physique)
    - Peut inclure des donn√©es suppl√©mentaires
    - Am√©liore la lisibilit√© du code

    CAS D'USAGE COMMUNS :
    - Validation des entr√©es utilisateur
    - Gestion des fichiers/IO
    - Appels r√©seau
    - Calculs avec contraintes physiques

    EXEMPLES CONCRETS :
    - Dans la data science : validation des jeux de donn√©es
    - Dans les APIs : gestion des erreurs HTTP
    - Dans les calculs scientifiques : v√©rification des domaines de validit√©

    √Ä √âVITER :
    - except: (trop large)
    - Ignorer silencieusement les erreurs (sauf cas tr√®s sp√©cifiques)
    - Messages d'erreur vagues ("Une erreur s'est produite")"""
)

# Diapositive 30 : Concepts cl√©s de la POO (version enrichie)
add_code_slide(
    prs,
    "Programmation Orient√©e Objet en Python - Concepts approfondis",
    """# 1. D√©finition d'une classe avec attributs et m√©thodes
class CompteBancaire:
    # Attribut de classe (partag√© par toutes les instances)
    taux_interet = 0.01  # 1%

    def __init__(self, titulaire: str, solde: float = 0.0):
        # Attributs d'instance
        self.titulaire = titulaire
        self._solde = solde  # Convention: _ pour "protected"
        self.__historique = []  # Name mangling: __ pour "private"

    # M√©thode d'instance
    def deposer(self, montant: float) -> None:
        if montant > 0:
            self._solde += montant
            self.__historique.append(f"D√©p√¥t: +{montant}‚Ç¨")
        else:
            raise ValueError("Le montant doit √™tre positif")

    def retirer(self, montant: float) -> None:
        if 0 < montant <= self._solde:
            self._solde -= montant
            self.__historique.append(f"Retrait: -{montant}‚Ç¨")
        else:
            raise ValueError("Montant invalide ou solde insuffisant")

    # Propri√©t√© pour acc√©der au solde
    @property
    def solde(self) -> float:
        return self._solde

    # M√©thode de classe
    @classmethod
    def modifier_taux(cls, nouveau_taux: float) -> None:
        if 0 <= nouveau_taux <= 0.1:  # 10% max
            cls.taux_interet = nouveau_taux
        else:
            raise ValueError("Taux d'int√©r√™t invalide")

    # M√©thode statique
    @staticmethod
    def calculer_interets(solde: float, taux: float) -> float:
        return solde * taux

    # M√©thodes sp√©ciales
    def __str__(self) -> str:
        return f"Compte de {self.titulaire}: {self._solde:.2f}‚Ç¨"

    def __repr__(self) -> str:
        return f"CompteBancaire(titulaire='{self.titulaire}', solde={self._solde})"

# 2. Utilisation de la classe
compte1 = CompteBancaire("Alice", 1000.0)
print(compte1)  # Utilise __str__

compte1.deposer(500)
print(f"Nouveau solde: {compte1.solde:.2f}‚Ç¨")  # Utilise la propri√©t√©

try:
    compte1.retirer(2000)  # Doit lever une exception
except ValueError as e:
    print(f"‚ö†Ô∏è Erreur: {e}")

# 3. H√©ritage et polymorphisme
class CompteEpargne(CompteBancaire):
    def __init__(self, titulaire: str, solde: float = 0.0, plafond: float = 10000.0):
        super().__init__(titulaire, solde)
        self.plafond = plafond

    # Surcharge de m√©thode (polymorphisme)
    def retirer(self, montant: float) -> None:
        if 0 < montant <= self._solde and (self._solde - montant) >= 0:
            if self._solde - montant >= 100:  # Solde minimum
                super().retirer(montant)
            else:
                raise ValueError("Solde minimum de 100‚Ç¨ requis")
        else:
            raise ValueError("Montant invalide ou solde insuffisant")

    # Nouvelle m√©thode sp√©cifique
    def appliquer_interets(self) -> None:
        interets = self.calculer_interets(self._solde, self.taux_interet)
        self.deposer(interets)

# Utilisation de la classe d√©riv√©e
compte_epargne = CompteEpargne("Bob", 5000.0)
compte_epargne.appliquer_interets()
print(f"Solde apr√®s int√©r√™ts: {compte_epargne.solde:.2f}‚Ç¨")

# 4. Encapsulation et propri√©t√©s
class Personne:
    def __init__(self, nom: str, age: int):
        self._nom = nom
        self._age = age

    @property
    def nom(self) -> str:
        return self._nom

    @nom.setter
    def nom(self, valeur: str) -> None:
        if not valeur.strip():
            raise ValueError("Le nom ne peut pas √™tre vide")
        self._nom = valeur

    @property
    def age(self) -> int:
        return self._age

    @age.setter
    def age(self, valeur: int) -> None:
        if not 0 <= valeur <= 120:
            raise ValueError("√Çge invalide")
        self._age = valeur

# Utilisation des propri√©t√©s
p = Personne("Charlie", 30)
print(f"{p.nom} a {p.age} ans")

try:
    p.age = 150  # Doit lever une exception
except ValueError as e:
    print(f"‚ö†Ô∏è {e}")""",
    explanation="""Concepts POO en Python :
1. Classes et instances
2. Attributs (d'instance et de classe)
3. M√©thodes (d'instance, de classe, statiques)
4. Encapsulation avec propri√©t√©s
5. H√©ritage et polymorphisme
6. M√©thodes sp√©ciales (__str__, __repr__)""",
    notes="""NOTES PR√âSENTATEUR :

    CONCEPTS FONDAMENTAUX DE LA POO :
    - Classe = mod√®le/plan (blueprint)
    - Objet/Instance = r√©alisation concr√®te
    - Attributs = donn√©es
    - M√©thodes = comportements

    EN PYTHON SP√âCIFIQUEMENT :
    - Tout est objet (m√™me les fonctions et modules)
    - Pas de modificateurs de visibilit√© stricts (public/private)
    - Conventions: _pour protected, __pour private (name mangling)
    - M√©thodes sp√©ciales (__dunder__ methods) pour surcharge d'op√©rateurs

    TYPES DE M√âTHODES :
    - M√©thodes d'instance: prennent self
    - M√©thodes de classe: prennent cls, d√©corateur @classmethod
    - M√©thodes statiques: pas de self/cls, d√©corateur @staticmethod

    PROPRI√âT√âS (@property) :
    - Permettent un contr√¥le fin sur l'acc√®s aux attributs
    - Getter/setter avec une syntaxe naturelle
    - Utile pour la validation, le calcul √† la vol√©e, etc.

    H√âRITAGE :
    - Simple ou multiple
    - super() pour appeler les m√©thodes parent
    - M√©thode resolved order (MRO) pour l'h√©ritage multiple

    POLYMORPHISME :
    - M√™me interface, comportements diff√©rents
    - "Duck typing": si √ßa marche comme un canard, c'est un canard
    - Pas besoin d'h√©ritage pour le polymorphisme

    CAS D'USAGE EN DATA SCIENCE :
    - Pandas DataFrame est une classe
    - NumPy arrays sont des objets
    - Les visualisations Matplotlib sont des objets
    - Les mod√®les scikit-learn sont des classes

    BONNES PRATIQUES :
    - Une classe = une responsabilit√© (principe SRP)
    - Composition > h√©ritage (favoriser la composition d'objets)
    - Noms de classes en PascalCase
    - Noms de m√©thodes/m√©thodes en snake_case
    - Documenter avec des docstrings"""
)


# Suite du script - Diapositives 31 √† 50

# Diapositive 31 : Approfondissement des listes - Techniques avanc√©es
add_code_slide(
    prs,
    "Techniques avanc√©es avec les listes",
    """# Copie de listes (attention aux r√©f√©rences !)
original = [1, 2, 3, 4]
copie1 = original          # M√™me r√©f√©rence !
copie2 = original.copy()   # Nouvelle liste
copie3 = original[:]       # Autre m√©thode de copie
original[0] = 99
print("Original:", original)  # [99, 2, 3, 4]
print("Copie1:", copie1)      # [99, 2, 3, 4] - Modifi√©e !
print("Copie2:", copie2)      # [1, 2, 3, 4] - Intacte
# Listes en compr√©hension avec conditions
nombres = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
pairs = [x for x in nombres if x % 2 == 0]
carr√©s = [x**2 for x in nombres if x % 2 != 0]
print("Nombres pairs:", pairs)    # [2, 4, 6, 8, 10]
print("Carr√©s impairs:", carr√©s)  # [1, 9, 25, 49, 81]
# Fonction zip() pour it√©rer sur plusieurs listes
noms = ["Alice", "Bob", "Charlie"]
ages = [25, 30, 35]
for nom, age in zip(noms, ages):
    print(f"{nom} a {age} ans")""",
    explanation="Copie profonde vs superficielle et compr√©hensions avanc√©es",
    notes="""NOTES PR√âSENTATEUR :

    PI√àGE DES R√âF√âRENCES :
    - copie1 = original cr√©e une nouvelle r√©f√©rence vers la m√™me liste
    - Modifier original modifie aussi copie1
    - Utiliser copy() ou [:] pour une vraie copie

    COMPR√âHENSIONS AVANC√âES :
    - Peut inclure des conditions complexes
    - Tr√®s utile pour filtrer et transformer des donn√©es
    - Syntaxe concise mais puissante

    FONCTION ZIP() :
    - Permet d'it√©rer sur plusieurs listes en parall√®le
    - Tr√®s utile pour combiner des donn√©es
    - √âquivalent √† un JOIN en SQL"""
)

# Diapositive 32 : Manipulation de cha√Ænes avanc√©e
add_code_slide(
    prs,
    "Manipulation avanc√©e de cha√Ænes de caract√®res",
    """# M√©thodes utiles des strings
texte = "  Python est un langage Puissant  "
print(texte.strip())            # "Python est un langage Puissant"
print(texte.lower())            # "  python est un langage puissant  "
print(texte.upper())            # "  PYTHON EST UN LANGAGE PUISSANT  "
print(texte.title())            # "  Python Est Un Langage Puissant  "
print(texte.replace("un", "le")) # "  Python est le langage Puissant  "
# Division et jointure
mots = texte.strip().split()
print(mots)                     # ['Python', 'est', 'un', 'langage', 'Puissant']
nouveau_texte = "-".join(mots)
print(nouveau_texte)            # "Python-est-un-langage-Puissant"
# Formatage avanc√© avec f-strings
nom = "Marie"
age = 28
taille = 1.68
info = f"""
Fiche personnelle:
    Nom: {nom:>10s}
    √Çge: {age:03d} ans
    Taille: {taille:.2f}m
"""
print(info)""",
    explanation="M√©thodes int√©gr√©es et formatage avanc√© pour le traitement de texte",
    notes="""NOTES PR√âSENTATEUR :

    M√âTHODES UTILES :
    - strip() : supprime les espaces en d√©but/fin
    - lower()/upper() : changement de casse
    - replace() : remplacement de sous-cha√Ænes
    - split()/join() : division et assemblage

    FORMATAGE AVANC√â :
    - :>10s : aligne √† droite sur 10 caract√®res
    - :03d : nombre entier sur 3 chiffres avec z√©ros
    - :.2f : nombre flottant avec 2 d√©cimales

    CAS D'USAGE :
    - Nettoyage de donn√©es textuelles
    - G√©n√©ration de rapports format√©s
    - Pr√©paration de donn√©es pour l'affichage"""
)

# Diapositive 33 : Les ensembles (sets) - Structure puissante
add_code_slide(
    prs,
    "Les ensembles (sets) : Collections uniques non ordonn√©es",
    """# Cr√©ation d'ensembles
fruits = {"pomme", "banane", "orange", "pomme"}
print(fruits)  # {"pomme", "banane", "orange"} - doublons supprim√©s
# Conversion depuis une liste
nombres = [1, 2, 2, 3, 3, 3, 4]
unique = set(nombres)
print(unique)  # {1, 2, 3, 4}
# Op√©rations sur les ensembles
a = {1, 2, 3, 4}
b = {3, 4, 5, 6}
print("Union:", a | b)          # {1, 2, 3, 4, 5, 6}
print("Intersection:", a & b)    # {3, 4}
print("Diff√©rence:", a - b)     # {1, 2}
print("Diff√©rence sym√©trique:", a ^ b)  # {1, 2, 5, 6}
# Ajout et suppression
a.add(5)
a.remove(1)
print("Apr√®s modifications:", a)  # {2, 3, 4, 5}
# Test d'appartenance (tr√®s rapide)
print("3 dans a ?", 3 in a)      # True
print("1 dans a ?", 1 in a)      # False""",
    explanation="Ensembles = collections non ordonn√©es d'√©l√©ments uniques",
    notes="""NOTES PR√âSENTATEUR :

    PROPRI√âT√âS DES ENSEMBLES :
    - √âl√©ments uniques (pas de doublons)
    - Non ordonn√©s (pas d'index)
    - Mutables (mais √©l√©ments doivent √™tre immuables)
    - Op√©rations math√©matiques ensemblistes

    CAS D'USAGE :
    - Suppression de doublons
    - Tests d'appartenance rapides
    - Op√©rations ensemblistes (union, intersection)
    - Filtrage de donn√©es uniques

    PERFORMANCE :
    - Test d'appartenance en O(1)
    - Tr√®s efficace pour grandes collections
    - Base pour certains algorithmes"""
)

# Diapositive 34 : Gestion des fichiers - Lecture/Ecriture
add_code_slide(
    prs,
    "Gestion des fichiers : Lecture et √©criture",
    """# √âcriture dans un fichier
with open("exemple.txt", "w", encoding="utf-8") as fichier:
    fichier.write("Premi√®re ligne\\n")
    fichier.write("Deuxi√®me ligne avec des accents: √©√®√ß√†\\n")
    fichier.writelines(["Troisi√®me ligne\\n", "Quatri√®me ligne\\n"])
# Lecture d'un fichier
with open("exemple.txt", "r", encoding="utf-8") as fichier:
    contenu = fichier.read()
    print("Contenu complet:\\n", contenu)
# Lecture ligne par ligne
with open("exemple.txt", "r", encoding="utf-8") as fichier:
    print("\\nLecture ligne par ligne:")
    for num, ligne in enumerate(fichier, 1):
        print(f"Ligne {num}: {ligne.strip()}")
# Gestion des chemins (module pathlib)
from pathlib import Path
chemin = Path("exemple.txt")
print(f"\\nLe fichier existe: {chemin.exists()}")
print(f"Taille: {chemin.stat().st_size} octets")""",
    explanation="Gestion contextuelle des fichiers avec 'with' et encodage UTF-8",
    notes="""NOTES PR√âSENTATEUR :

    BONNES PRATIQUES :
    - Toujours sp√©cifier l'encodage (utf-8)
    - Utiliser 'with' pour gestion automatique
    - pathlib plus moderne que os.path

    MODES D'OUVERTURE :
    - "r" lecture (par d√©faut)
    - "w" √©criture (√©crase)
    - "a" ajout (√† la fin)
    - "x" cr√©ation exclusive
    - "+" lecture/√©criture

    GESTION DES ERREURS :
    - FileNotFoundError si fichier inexistant
    - PermissionError si droits insuffisants
    - UnicodeDecodeError si encodage incorrect

    CAS D'USAGE :
    - Logs d'application
    - Configuration
    - Import/export de donn√©es"""
)

# Diapositive 35 : Gestion des exceptions - Approfondissement
add_code_slide(
    prs,
    "Gestion avanc√©e des exceptions",
    """# Hi√©rarchie des exceptions
try:
    resultat = 10 / 0
except ZeroDivisionError as e:
    print(f"Erreur de division par z√©ro: {e}")
except ArithmeticError as e:
    print(f"Erreur arithm√©tique: {e}")
except Exception as e:
    print(f"Erreur g√©n√©rale: {e}")
# Cr√©ation d'exceptions personnalis√©es
class TemperatureError(Exception):
    """Exception pour temp√©ratures invalides"""
    def __init__(self, temp, message="Temp√©rature invalide"):
        self.temp = temp
        self.message = message
        super().__init__(f"{message}: {temp}¬∞C")
# Utilisation
def convertir_celsius_fahrenheit(temp_c):
    if temp_c < -273.15:
        raise TemperatureError(temp_c, "Temp√©rature sous le z√©ro absolu")
    return temp_c * 9/5 + 32
try:
    print(convertir_celsius_fahrenheit(-300))
except TemperatureError as e:
    print(f"Erreur: {e}")
# Utilisation de else et finally
try:
    fichier = open("fichier_inexistant.txt")
except FileNotFoundError:
    print("Fichier non trouv√©")
else:
    print("Fichier ouvert avec succ√®s")
    fichier.close()
finally:
    print("Ce bloc s'ex√©cute toujours")""",
    explanation="Hi√©rarchie des exceptions et cr√©ation d'exceptions personnalis√©es",
    notes="""NOTES PR√âSENTATEUR :

    HI√âRARCHIE DES EXCEPTIONS :
    - Capturer les exceptions sp√©cifiques en premier
    - Exception g√©n√©rale en dernier recours
    - Voir l'arbre d'h√©ritage dans la documentation

    EXCEPTIONS PERSONNALIS√âES :
    - H√©ritent de Exception ou sous-classes
    - Utile pour domaine sp√©cifique
    - Peut inclure des donn√©es suppl√©mentaires

    BLOC FINALLY :
    - Toujours ex√©cut√©
    - Id√©al pour nettoyage (fermeture de fichiers, connexions)
    - M√™me si une exception est lev√©e

    BONNES PRATIQUES :
    - Ne pas utiliser except: (trop large)
    - Documenter les exceptions lev√©es
    - Utiliser des messages d'erreur clairs"""
)

# Diapositive 36 : Programmation fonctionnelle - Lambda et fonctions d'ordre sup√©rieur
add_code_slide(
    prs,
    "Programmation fonctionnelle : Lambda et fonctions d'ordre sup√©rieur",
    """# Fonctions lambda (anonymes)
carr√© = lambda x: x ** 2
print(carr√©(5))  # 25
somme = lambda a, b: a + b
print(somme(3, 4))  # 7
# Utilisation avec sorted()
mots = ["pomme", "banane", "orange", "kiwi", "ananas"]
print(sorted(mots))                     # Tri alphab√©tique
print(sorted(mots, key=lambda x: len(x))) # Tri par longueur
# Fonctions d'ordre sup√©rieur
def appliquer_fonction(fonction, valeur):
    return fonction(valeur)
print(appliquer_fonction(lambda x: x*3, 5))  # 15
# Map, filter, reduce
nombres = [1, 2, 3, 4, 5]
carr√©s = list(map(lambda x: x**2, nombres))
pairs = list(filter(lambda x: x % 2 == 0, nombres))
from functools import reduce
produit = reduce(lambda x, y: x * y, nombres)
print("Carr√©s:", carr√©s)      # [1, 4, 9, 16, 25]
print("Pairs:", pairs)        # [2, 4]
print("Produit:", produit)    # 120 (1*2*3*4*5)""",
    explanation="Paradigme fonctionnel : fonctions comme objets de premi√®re classe",
    notes="""NOTES PR√âSENTATEUR :

    FONCTIONS LAMBDA :
    - Fonctions anonymes en une ligne
    - Syntaxe: lambda [args]: expression
    - Utile pour op√©rations simples
    - √Ä √©viter pour logique complexe

    FONCTIONS D'ORDRE SUP√âRIEUR :
    - Prennent des fonctions en argument
    - Retournent des fonctions
    - map(), filter(), reduce()

    CAS D'USAGE :
    - Tri personnalis√© (key=)
    - Transformation de donn√©es (map)
    - Filtrage de donn√©es (filter)
    - Agr√©gation (reduce)

    PERFORMANCE :
    - map/filter souvent plus rapides que compr√©hensions
    - Mais moins lisibles pour d√©butants
    - reduce moins utilis√© (souvent remplac√© par boucles)"""
)

# Diapositive 37 : Modules et packages - Organisation du code
add_code_slide(
    prs,
    "Modules et packages : Organisation et r√©utilisation du code",
    """# Structure d'un package
"""
mon_package/
‚îú‚îÄ‚îÄ __init__.py        # Initialisation du package
‚îú‚îÄ‚îÄ module1.py         # Module avec fonctions
‚îú‚îÄ‚îÄ module2.py         # Autre module
‚îî‚îÄ‚îÄ sous_package/      # Sous-package
    ‚îú‚îÄ‚îÄ __init__.py
    ‚îî‚îÄ‚îÄ module3.py
"""
# Contenu de __init__.py
__all__ = ["module1", "module2"]  # Liste des modules export√©s
# Importation relative
# Dans module3.py:
from ..module1 import ma_fonction
# Importation absolue
import mon_package.module1
# Utilisation de __name__
if __name__ == "__main__":
    print("Ce code s'ex√©cute seulement si le fichier est lanc√© directement")
# Installation de packages
# pip install -e .  # Installation en mode √©ditable""",
    explanation="Architecture modulaire pour projets complexes",
    notes="""NOTES PR√âSENTATEUR :

    STRUCTURE DES PACKAGES :
    - __init__.py marque un dossier comme package
    - Peut √™tre vide ou contenir du code d'initialisation
    - __all__ contr√¥le ce qui est import√© avec from package import *

    IMPORTS :
    - Absolus : depuis la racine du projet
    - Relatifs : avec . (m√™me niveau), .. (niveau sup√©rieur)
    - √Ä privil√©gier pour √©viter les conflits

    BONNES PRATIQUES :
    - Un module = une responsabilit√©
    - Noms de modules en minuscules
    - √âviter les imports circulaires
    - Documentation avec docstrings

    DISTRIBUTION :
    - setup.py pour la configuration
    - pip install -e pour d√©veloppement
    - PyPI pour la publication"""
)

# Diapositive 38 : It√©rateurs et g√©n√©rateurs
add_code_slide(
    prs,
    "It√©rateurs et g√©n√©rateurs : Traitement paresseux des donn√©es",
    """# Cr√©ation d'un it√©rateur
class Compteur:
    def __init__(self, max):
        self.max = max
        self.current = 0
    def __iter__(self):
        return self
    def __next__(self):
        if self.current >= self.max:
            raise StopIteration
        self.current += 1
        return self.current
compteur = Compteur(3)
for num in compteur:
    print(num)  # 1, 2, 3
# G√©n√©rateur avec yield
def g√©n√©rateur_nombres(pas=1):
    num = 0
    while True:
        yield num
        num += pas
gen = g√©n√©rateur_nombres(2)
print(next(gen))  # 0
print(next(gen))  # 2
print(next(gen))  # 4
# Expression g√©n√©ratrice
carr√©s = (x**2 for x in range(5))
for carr√© in carr√©s:
    print(carr√©)  # 0, 1, 4, 9, 16
# Avantages des g√©n√©rateurs
def lire_gros_fichier(nom_fichier):
    with open(nom_fichier) as f:
        for ligne in f:
            yield ligne.strip()""",
    explanation="Traitement m√©moire-efficace avec yield et expressions g√©n√©ratrices",
    notes="""NOTES PR√âSENTATEUR :

    IT√âRATEURS VS G√âN√âRATEURS :
    - It√©rateur : classe avec __iter__ et __next__
    - G√©n√©rateur : fonction avec yield
    - Les deux impl√©mentent le protocole d'it√©ration

    AVANTAGES :
    - Traitement paresseux (lazy evaluation)
    - √âconomie de m√©moire
    - Id√©al pour grands jeux de donn√©es
    - Permet des s√©quences infinies

    CAS D'USAGE :
    - Traitement de gros fichiers
    - Streams de donn√©es
    - S√©quences math√©matiques infinies
    - Pipelines de traitement

    EXPRESSIONS G√âN√âRATRICES :
    - Syntaxe similaire aux compr√©hensions de liste
    - Mais utilise () au lieu de []
    - Produit des valeurs √† la demande"""
)

# Diapositive 39 : D√©corateurs - M√©taprogrammation
add_code_slide(
    prs,
    "D√©corateurs : Modification dynamique de fonctions",
    """# D√©corateur simple
def mon_decorateur(fonction):
    def wrapper():
        print("Avant l'appel de la fonction")
        resultat = fonction()
        print("Apr√®s l'appel de la fonction")
        return resultat
    return wrapper
@mon_decorateur
def dire_bonjour():
    print("Bonjour !")
dire_bonjour()
# D√©corateur avec arguments
def repetitif(n):
    def decorateur(fonction):
        def wrapper(*args, **kwargs):
            for _ in range(n):
                resultat = fonction(*args, **kwargs)
            return resultat
        return wrapper
    return decorateur
@repetitif(3)
def saluer(nom):
    print(f"Salut {nom}!")
saluer("Alice")  # Affiche 3 fois
# D√©corateurs int√©gr√©s
@staticmethod
def methode_statique():
    print("M√©thode statique")
@classmethod
def methode_classe(cls):
    print(f"M√©thode de classe de {cls.__name__}")
# Cache/m√©moization
from functools import lru_cache
@lru_cache(maxsize=128)
def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n-1) + fibonacci(n-2)""",
    explanation="Fonctions qui modifient d'autres fonctions - Puissant mais √† utiliser avec parcimonie",
    notes="""NOTES PR√âSENTATEUR :

    CONCEPT DE D√âCORATEUR :
    - Fonction qui prend une fonction en argument
    - Retourne une nouvelle fonction modifi√©e
    - Syntaxe @decorateur

    CAS D'USAGE :
    - Logging
    - Mesure de performance
    - V√©rification d'arguments
    - Cache/m√©moization
    - Contr√¥le d'acc√®s

    D√âCORATEURS INT√âGR√âS :
    - @staticmethod : m√©thode sans self
    - @classmethod : m√©thode de classe
    - @property : getter/setter
    - @lru_cache : m√©moization

    BONNES PRATIQUES :
    - Garder les d√©corateurs simples
    - Documenter leur comportement
    - √âviter les effets de bord
    - Utiliser functools.wraps pour pr√©server les m√©tadonn√©es"""
)

# Diapositive 40 : Contexte managers - Gestion des ressources
add_code_slide(
    prs,
    "Contexte managers : Gestion automatique des ressources",
    """# Utilisation basique avec 'with'
with open("fichier.txt", "w") as f:
    f.write("Hello World")
# Cr√©ation d'un contexte manager
class MonContexte:
    def __enter__(self):
        print("Entr√©e dans le contexte")
        return self
    def __exit__(self, exc_type, exc_val, exc_tb):
        print("Sortie du contexte")
        if exc_type is not None:
            print(f"Exception captur√©e: {exc_type}")
        return False  # Propager l'exception
with MonContexte() as ctx:
    print("Dans le bloc with")
# Contexte manager avec contextlib
from contextlib import contextmanager
@contextmanager
def mon_contexte():
    print("Setup")
    yield "valeur"
    print("Teardown")
with mon_contexte() as valeur:
    print(f"Valeur re√ßue: {valeur}")
# Exemple pratique : minuterie
from time import time
@contextmanager
def minuter(nom):
    start = time()
    yield
    elapsed = time() - start
    print(f"{nom} a pris {elapsed:.2f} secondes")""",
    explanation="Protocole pour gestion s√ªre des ressources avec with",
    notes="""NOTES PR√âSENTATEUR :

    PROTOCOLE CONTEXTE MANAGER :
    - __enter__ : setup, retourne la ressource
    - __exit__ : teardown, g√®re les exceptions
    - Utilis√© avec 'with'

    AVANTAGES :
    - Gestion automatique des ressources
    - Code plus s√ªr et plus lisible
    - Gestion centralis√©e des exceptions

    CAS D'USAGE :
    - Ouverture/fermeture de fichiers
    - Connexions r√©seau/base de donn√©es
    - Verrouillage de threads
    - Mesure de performance

    CONTEXTLIB :
    - contextmanager pour cr√©er des CM avec g√©n√©rateurs
    - closing pour ajouter __exit__ √† des objets
    - suppress pour ignorer des exceptions

    BONNES PRATIQUES :
    - Toujours lib√©rer les ressources
    - G√©rer proprement les exceptions
    - Documenter le comportement"""
)

# Diapositive 41 : M√©taclasses - Programmation avanc√©e
add_code_slide(
    prs,
    "M√©taclasses : Contr√¥le de la cr√©ation des classes",
    """# M√©taclasse basique
class MaMeta(type):
    def __new__(cls, name, bases, dct):
        print(f"Cr√©ation de la classe {name}")
        dct['version'] = 1.0
        return super().__new__(cls, name, bases, dct)
class MaClasse(metaclass=MaMeta):
    pass
print(MaClasse.version)  # 1.0
# M√©taclasse pour singleton
class Singleton(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super().__call__(*args, **kwargs)
        return cls._instances[cls]
class SingletonClass(metaclass=Singleton):
    pass
a = SingletonClass()
b = SingletonClass()
print(a is b)  # True - M√™me instance
# M√©taclasse pour enregistrement automatique
class PluginMeta(type):
    def __init__(cls, name, bases, dct):
        super().__init__(name, bases, dct)
        if not hasattr(cls, 'plugins'):
            cls.plugins = []
        else:
            cls.plugins.append(cls)
class PluginBase(metaclass=PluginMeta):
    pass
class Plugin1(PluginBase): pass
class Plugin2(PluginBase): pass
print(PluginBase.plugins)  # [<class '__main__.Plugin1'>, <class '__main__.Plugin2'>]""",
    explanation="Contr√¥le avanc√© de la cr√©ation et du comportement des classes",
    notes="""NOTES PR√âSENTATEUR :

    CONCEPT DE M√âTACLASSE :
    - Classe d'une classe (type est la m√©taclasse par d√©faut)
    - Contr√¥le la cr√©ation des classes
    - Puissant mais complexe

    CAS D'USAGE :
    - Singleton
    - Enregistrement automatique
    - Validation de classes
    - G√©n√©ration de code
    - Framework ORM

    M√âTACLASSE VS D√âCORATEURS :
    - M√©taclasses : contr√¥le la cr√©ation des classes
    - D√©corateurs : modifie les fonctions/m√©thodes
    - Pr√©f√©rer les d√©corateurs quand possible

    BONNES PRATIQUES :
    - Documenter abondamment
    - √âviter sauf n√©cessit√©
    - Pr√©f√©rer la composition √† l'h√©ritage
    - Tester rigoureusement"""
)

# Diapositive 42 : Programmation asynchrone - async/await
add_code_slide(
    prs,
    "Programmation asynchrone : async/await",
    """# Fonction asynchrone basique
import asyncio
async def dire_bonjour():
    print("Bonjour")
    await asyncio.sleep(1)
    print("Au revoir")
# Ex√©cution d'une coroutine
async def main():
    await dire_bonjour()
# asyncio.run(main())  # √Ä ex√©cuter dans un environnement async
# Ex√©cution concurrentielle
async def compter(n):
    for i in range(n):
        print(f"{i} (compteur {n})")
        await asyncio.sleep(0.1)
async def main_concurrent():
    await asyncio.gather(compter(5), compter(3))
# asyncio.run(main_concurrent())
# Utilisation pratique : requ√™tes HTTP
import aiohttp
async def fetch_url(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            return await response.text()
# Exemple avec timeout
async def operation_limitee():
    try:
        async with asyncio.timeout(1):
            await asyncio.sleep(2)
    except TimeoutError:
        print("Op√©ration trop longue !")""",
    explanation="Programmation concurrentielle avec coroutines et event loop",
    notes="""NOTES PR√âSENTATEUR :

    CONCEPTS CL√âS :
    - Coroutine : fonction asynchrone (avec async)
    - await : point de suspension
    - Event loop : orchestre l'ex√©cution
    - Non-bloquant : lib√®re le thread pendant l'attente

    AVANTAGES :
    - Meilleure utilisation des ressources
    - Code plus lisible que les threads
    - Id√©al pour I/O bound operations

    CAS D'USAGE :
    - Requ√™tes HTTP
    - Traitement de streams
    - Serveurs web
    - Bases de donn√©es

    BIBLIOTH√àQUES :
    - asyncio : biblioth√®que standard
    - aiohttp : requ√™tes HTTP
    - asyncpg : PostgreSQL
    - aioredis : Redis

    BONNES PRATIQUES :
    - √âviter le code bloquant
    - G√©rer les timeouts
    - Limiter la concurrence
    - Tester avec pytest-asyncio"""
)

# Diapositive 43 : Typage statique - Type hints
add_code_slide(
    prs,
    "Typage statique : Type hints et mypy",
    """# Annotation de types basique
def saluer(nom: str) -> str:
    return f"Bonjour {nom}"
# Types complexes
from typing import List, Dict, Tuple, Optional, Union
def traiter_donn√©es(
    donn√©es: List[Dict[str, Union[int, float]]],
    facteur: Optional[float] = None
) -> Tuple[float, float]:
    # Implementation ici
    return 0.0, 0.0
# Classes avec typage
class Personne:
    def __init__(self, nom: str, age: int):
        self.nom = nom
        self.age = age
    def se_pr√©senter(self) -> str:
        return f"Je m'appelle {self.nom} et j'ai {self.age} ans"
# Typage des variables
age: int = 25
noms: List[str] = ["Alice", "Bob"]
# Union de types (Python 3.10+)
def convertir(valeur: int | str) -> int:
    return int(valeur)
# Utilisation avec mypy
# $ mypy mon_fichier.py  # V√©rification statique des types""",
    explanation="Am√©lioration de la maintenabilit√© avec annotations de type",
    notes="""NOTES PR√âSENTATEUR :

    AVANTAGES DU TYPAGE :
    - Meilleure documentation
    - D√©tection pr√©coce d'erreurs
    - Meilleure compl√©tion IDE
    - Facilite la maintenance

    OUTILS :
    - mypy : v√©rificateur de types statique
    - pyright : alternative de Microsoft
    - pytype : de Google
    - IDEs : PyCharm, VS Code

    TYPES AVANC√âS :
    - List, Dict, Tuple, Set (depuis typing)
    - Optional pour valeurs nulles
    - Union pour plusieurs types
    - TypeVar pour g√©n√©riques

    BONNES PRATIQUES :
    - Commencer par les fonctions publiques
    - Utiliser graduellement
    - Ne pas sur-annoter
    - Documenter les types complexes"""
)

# Diapositive 44 : Tests unitaires - pytest
add_code_slide(
    prs,
    "Tests unitaires avec pytest",
    """# Structure d'un test
def addition(a: int, b: int) -> int:
    return a + b
def test_addition():
    assert addition(2, 3) == 5
    assert addition(-1, 1) == 0
    assert addition(0, 0) == 0
# Utilisation de fixtures
import pytest
@pytest.fixture
def sample_data():
    return [1, 2, 3, 4, 5]
def test_somme(sample_data):
    assert sum(sample_data) == 15
# Tests param√©tr√©s
@pytest.mark.parametrize("a,b,expected", [
    (1, 2, 3),
    (0, 0, 0),
    (-1, 1, 0)
])
def test_addition_param√©tr√©e(a, b, expected):
    assert addition(a, b) == expected
# Gestion des exceptions
def test_division_par_zero():
    with pytest.raises(ZeroDivisionError):
        1 / 0
# Mocking
from unittest.mock import MagicMock
def test_appel_api():
    mock = MagicMock()
    mock.get.return_value.status_code = 200
    # Utilisation du mock dans le test
# Ex√©cution des tests
# $ pytest mon_fichier.py -v""",
    explanation="M√©thodologie de test pour code robuste et maintenable",
    notes="""NOTES PR√âSENTATEUR :

    PRINCIPES DES TESTS :
    - Isoler le code test√©
    - Tests d√©terministes
    - V√©rifier un comportement, pas une impl√©mentation
    - Rapides √† ex√©cuter

    STRUCTURE :
    - Arrange : pr√©paration
    - Act : action
    - Assert : v√©rification

    OUTILS :
    - pytest : framework de test
    - coverage : mesure de couverture
    - mock : simulation d'objets
    - hypothesis : tests bas√©s sur propri√©t√©s

    BONNES PRATIQUES :
    - Un test = un comportement
    - Noms descriptifs
    - Tests ind√©pendants
    - Ex√©cuter souvent (CI/CD)
    - Cibler 80-90% de couverture"""
)

# Diapositive 45 : Bonnes pratiques - PEP 8 et au-del√†
add_content_slide(
    prs,
    "Bonnes pratiques de d√©veloppement Python",
    """# Conventions de nommage (PEP 8)
variable_snake_case = 42
CONSTANTE_UPPER_CASE = 3.14
def fonction_snake_case():
    pass
class MaClassePascalCase:
    pass
# Structure du code
# 1. Imports standard
# 2. Imports tiers
# 3. Imports locaux
# 4. Constantes
# 5. Classes
# 6. Fonctions
# Documentation
def fonction_bien_document√©e(param1: int, param2: str) -> bool:
    \"\"\"
    Description claire de ce que fait la fonction.

    Args:
        param1: Description du premier param√®tre
        param2: Description du second param√®tre

    Returns:
        bool: Description de la valeur retourn√©e

    Raises:
        ValueError: Si les param√®tres sont invalides
    \"\"\"
    # Impl√©mentation
# Outils de qualit√©
# flake8 : v√©rification PEP 8
# pylint : analyse statique
# black : formatage automatique
# isort : tri des imports
# Outils de packaging
# poetry : gestion des d√©pendances
# twine : publication sur PyPI""",
    explanation="Standards et outils pour un code professionnel et maintenable",
    notes="""NOTES PR√âSENTATEUR :

    PEP 8 :
    - 79 caract√®res par ligne (docstrings: 72)
    - 4 espaces d'indentation
    - Lignes vides pour s√©parer les fonctions/classes
    - Espaces autour des op√©rateurs

    DOCUMENTATION :
    - Docstrings pour modules, classes, fonctions
    - Format Google, NumPy ou reStructuredText
    - Exemples dans les docstrings

    OUTILS RECOMMAND√âS :
    - black : formatage automatique
    - isort : organisation des imports
    - flake8/pylint : linting
    - mypy : typage
    - pytest : tests

    BONNES PRATIQUES :
    - Commits atomiques
    - Messages de commit clairs
    - Revue de code
    - Documentation √† jour
    - Gestion des d√©pendances"""
)

# Diapositive 46 : Optimisation des performances
add_content_slide(
    prs,
    "Optimisation des performances en Python",
    """# Profilage du code
import cProfile
def fonction_lente():
    total = 0
    for i in range(1000000):
        total += i
    return total
# cProfile.run('fonction_lente()')
# Optimisations courantes
# 1. √âviter les boucles inutiles
# 2. Utiliser des compr√©hensions
# 3. Pr√©f√©rer les g√©n√©rateurs pour les gros datasets
# 4. Utiliser des structures de donn√©es adapt√©es
# 5. Minimiser les appels de fonction dans les boucles
# Utilisation de NumPy pour les calculs vectoris√©s
import numpy as np
data = np.random.rand(1000000)
result = data * 2 + 1  # Op√©ration vectoris√©e (beaucoup plus rapide)
# Compilation avec Numba
from numba import jit
@jit(nopython=True)
def fonction_optimis√©e(x):
    return x * 2 + 1
# Utilisation de Cython
# %load_ext cython
# %%cython
# def fonction_cython(int x):
#     return x * 2 + 1
# Parallelisation
from multiprocessing import Pool
with Pool(4) as p:
    results = p.map(fonction_lente, range(4))""",
    explanation="Techniques pour am√©liorer les performances du code Python",
    notes="""NOTES PR√âSENTATEUR :

    PROFILAGE :
    - Identifier les goulots d'√©tranglement
    - cProfile pour analyse d√©taill√©e
    - timeit pour micro-benchmarks

    OPTIMISATIONS :
    - Algorithmes avant micro-optimisations
    - Structures de donn√©es adapt√©es
    - √âviter les copies inutiles
    - Cache/m√©moization

    OUTILS :
    - NumPy : calculs vectoris√©s
    - Numba : compilation JIT
    - Cython : compilation en C
    - multiprocessing : parall√©lisme

    BONNES PRATIQUES :
    - Ne pas optimiser pr√©matur√©ment
    - Mesurer avant/apr√®s
    - Documenter les optimisations
    - Consid√©rer les trade-offs (lisibilit√© vs performance)"""
)

# Diapositive 47 : Int√©gration avec d'autres langages
add_content_slide(
    prs,
    "Int√©gration de Python avec d'autres langages",
    """# Appel de code C avec ctypes
from ctypes import CDLL, c_int
libc = CDLL("libc.so.6")
print(libc.printf(b"Hello from C!\\n"))  # Appel de fonction C
# Int√©gration avec C++ via pybind11
# N√©cessite compilation s√©par√©e
# from my_module import ma_fonction_cpp
# Utilisation de Cython
# fichier.pyx :
# cdef extern from "ma_biblio.h":
#     int ma_fonction_c(int x)
# def wrapper_python(x):
#     return ma_fonction_c(x)
# Appel de Java avec JPype
import jpype
jvm = jpype.startJVM()
java_list = jpype.java.util.ArrayList()
java_list.add("Python")
java_list.add("Java")
print(java_list.size())  # 2
# Int√©gration avec R via rpy2
import rpy2.robjects as robjects
r = robjects.r
r('x <- c(1, 2, 3)')
print(r['x'][0])  # 1.0
# Appel de code JavaScript avec PyExecJS
import execjs
ctx = execjs.compile("""
    function add(a, b) {
        return a + b;
    }
""")
print(ctx.call("add", 2, 3))  # 5""",
    explanation="Interop√©rabilit√© avec d'autres √©cosyst√®mes pour √©tendre les capacit√©s",
    notes="""NOTES PR√âSENTATEUR :

    INT√âGRATION C/CTYPES :
    - Appel direct de biblioth√®ques C
    - Pas besoin de code interm√©diaire
    - Performances natives

    CYTHON :
    - √âcriture de code Python avec annotations de type C
    - Compilation en module C
    - Performances proches du C

    JPYPE/RPY2 :
    - Pont entre Python et JVM
    - Int√©gration avec l'√©cosyst√®me R
    - Utile pour r√©utiliser du code existant

    CAS D'USAGE :
    - R√©utilisation de biblioth√®ques existantes
    - Optimisation de parties critiques
    - Int√©gration dans des syst√®mes h√©t√©rog√®nes

    OUTILS :
    - ctypes : standard library
    - CFFI : alternative moderne
    - pybind11 : pour C++
    - SWIG : g√©n√©ration de wrappers"""
)

# Diapositive 48 : D√©ploiement et packaging
add_content_slide(
    prs,
    "D√©ploiement et packaging d'applications Python",
    """# Structure d'un projet Python
"""
mon_projet/
‚îú‚îÄ‚îÄ mon_projet/          # Package principal
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ module1.py
‚îÇ   ‚îî‚îÄ‚îÄ module2.py
‚îú‚îÄ‚îÄ tests/               # Tests unitaires
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ test_module1.py
‚îú‚îÄ‚îÄ docs/                # Documentation
‚îú‚îÄ‚îÄ setup.py             # Configuration du package
‚îú‚îÄ‚îÄ requirements.txt     # D√©pendances
‚îú‚îÄ‚îÄ README.md            # Documentation
‚îî‚îÄ‚îÄ pyproject.toml       # Configuration moderne
"""
# Contenu de setup.py
from setuptools import setup, find_packages
setup(
    name="mon_projet",
    version="0.1.0",
    packages=find_packages(),
    install_requires=[
        'numpy>=1.20.0',
        'pandas>=1.3.0'
    ],
    entry_points={
        'console_scripts': [
            'mon_commande=mon_projet.module1:main'
        ]
    }
)
# Cr√©ation d'un ex√©cutable avec PyInstaller
# pyinstaller --onefile mon_script.py
# Cr√©ation d'un package wheel
# python setup.py bdist_wheel
# D√©ploiement sur PyPI
# twine upload dist/*
# Utilisation de Docker
"""
FROM python:3.9-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt
COPY . .
CMD ["python", "mon_script.py"]
"""",
    explanation="De la structure du projet au d√©ploiement en production",
    notes="""NOTES PR√âSENTATEUR :

    STRUCTURE STANDARD :
    - S√©paration code/source/tests
    - Documentation int√©gr√©e
    - Fichiers de configuration clairs

    SETUP.PY :
    - M√©tadonn√©es du package
    - D√©pendances
    - Points d'entr√©e pour CLI

    OUTILS DE PACKAGING :
    - setuptools : standard
    - poetry : moderne, gestion des d√©pendances
    - pipenv : alternative
    - flit : l√©ger

    D√âPLOIEMENT :
    - PyPI pour les biblioth√®ques
    - Docker pour les applications
    - Serverless (AWS Lambda, etc.)
    - PaaS (Heroku, etc.)

    BONNES PRATIQUES :
    - Versionnement s√©mantique
    - Documentation compl√®te
    - Tests automatis√©s
    - CI/CD pipeline
    - Gestion des d√©pendances"""
)

# Diapositive 49 : S√©curit√© en Python
add_content_slide(
    prs,
    "Bonnes pratiques de s√©curit√© en Python",
    """# Gestion s√©curis√©e des entr√©es utilisateur
import re
def valider_email(email: str) -> bool:
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))
# Protection contre les injections
import sqlite3
def requete_securis√©e(db_path, user_id):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    # Utiliser des param√®tres plut√¥t que de la concat√©nation
    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    # Pas : cursor.execute(f"SELECT * FROM users WHERE id = {user_id}")
# Gestion des mots de passe
from passlib.hash import pbkdf2_sha256
mot_de_passe = "mon_mot_de_passe"
hash = pbkdf2_sha256.hash(mot_de_passe)
# V√©rification
pbkdf2_sha256.verify(mot_de_passe, hash)  # True
# S√©curit√© des fichiers
import os
def √©crire_fichier_s√©curis√©(chemin, contenu):
    # V√©rifier que le chemin est dans le r√©pertoire autoris√©
    if not os.path.abspath(chemin).startswith("/chemin/autoris√©"):
        raise ValueError("Chemin non autoris√©")
    with open(chemin, "w") as f:
        f.write(contenu)
# Utilisation de HTTPS
import requests
response = requests.get("https://api.example.com", verify=True)  # V√©rifie le certificat SSL
# Gestion des secrets
import os
from dotenv import load_dotenv
load_dotenv()  # Charge les variables d'environnement depuis .env
db_password = os.getenv("DB_PASSWORD")  # Jamais en dur dans le code !""",
    explanation="Protection contre les vuln√©rabilit√©s courantes dans les applications Python",
    notes="""NOTES PR√âSENTATEUR :

    VALIDATION DES ENTR√âES :
    - Toujours valider les donn√©es utilisateur
    - Utiliser des expressions r√©guli√®res
    - Rejeter plut√¥t que de corriger

    INJECTIONS :
    - SQL : utiliser des param√®tres
    - OS : √©viter os.system avec entr√©e utilisateur
    - HTML/JS : √©chapper les caract√®res

    MOTS DE PASSE :
    - Jamais en clair dans le code
    - Utiliser des fonctions de hachage (pas MD5/SHA1)
    - pbkdf2, bcrypt, argon2

    GESTION DES SECRETS :
    - Variables d'environnement
    - Fichiers .env (exclus du versioning)
    - Services de gestion de secrets (Vault, etc.)

    BONNES PRATIQUES :
    - Mises √† jour r√©guli√®res
    - Audit des d√©pendances (safety, dependabot)
    - Principes de moindre privil√®ge
    - Journalisation des activit√©s sensibles"""
)

# Diapositive 50 : Conclusion et ressources
add_content_slide(
    prs,
    "Conclusion et ressources pour aller plus loin",
    """üéØ R√âCAPITULATIF DES COMP√âTENCES ACQUISES :
‚Ä¢ Ma√Ætrise de la syntaxe Python et des structures de donn√©es
‚Ä¢ Compr√©hension des concepts avanc√©s (POO, d√©corateurs, m√©taclasses)
‚Ä¢ Capacit√© √† √©crire du code robuste et maintenable
‚Ä¢ Connaissance des bonnes pratiques et outils professionnels
‚Ä¢ Pr√©paration pour l'analyse de donn√©es avec NumPy/Pandas
üìö RESSOURCES POUR APPROFONDIR :
‚Ä¢ Livres :
  - "Fluent Python" - Luciano Ramalho
  - "Python Cookbook" - David Beazley
  - "Effective Python" - Brett Slatkin
‚Ä¢ Sites :
  - Real Python (realpython.com)
  - Python Official Docs (docs.python.org)
  - PyCon Talks (youtube.com/user/pycon101)
‚Ä¢ Communaut√©s :
  - Stack Overflow (stackoverflow.com)
  - Python Discord (pythondiscord.com)
  - Meetups locaux (meetup.com)
üí° PROCHAINES √âTAPES :
‚Ä¢ Pratiquer avec des projets personnels
‚Ä¢ Explorer les biblioth√®ques scientifiques (NumPy, Pandas)
‚Ä¢ Contribuer √† des projets open source
‚Ä¢ Participer √† des hackathons ou d√©fis de codage
‚Ä¢ Rester √† jour avec les √©volutions du langage""",
    notes="""NOTES PR√âSENTATEUR :

    R√âCAPITULATIF :
    - Faire un tour rapide des concepts cl√©s vus
    - Souligner les comp√©tences acquises
    - Encourager les participants

    RESSOURCES :
    - Recommander des ressources adapt√©es au niveau
    - Insister sur l'importance de la pratique
    - Encourager la participation communautaire

    PROCHAINES √âTAPES :
    - Parler des ateliers de l'apr√®s-midi
    - Rappeler les objectifs des jours suivants
    - Proposer des id√©es de projets concrets

    MOTIVATION :
    - Python est un langage en constante √©volution
    - Beaucoup d'opportunit√©s professionnelles
    - Communaut√© tr√®s active et accueillante

    CL√îTURE :
    - Remercier les participants
    - Rappeler les horaires de l'apr√®s-midi
    - Inviter aux questions finales"""
)

# Enregistrer la pr√©sentation mise √† jour
output_filename = "Formation_Python_Analyse_Donnees_Jour1_Complete.pptx"
prs.save(output_filename)
print(f"Pr√©sentation compl√®te g√©n√©r√©e et enregistr√©e sous le nom : {output_filename}")
